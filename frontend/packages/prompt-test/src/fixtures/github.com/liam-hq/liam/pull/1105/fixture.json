{
  "name": "liam-hq/liam/pull/1105",
  "assert": [
    {
      "type": "llm-rubric",
      "value": "Suggestions like \"Implement a migration plan to properly backfill existin records when new columns are added\" should be treated as WARNING rather than CRITICAL."
    }
  ],
  "vars": {
    "prDescription": "",
    "prComments": "",
    "docsContent": "",
    "schemaFile": {
      "filename": "frontend/packages/db/schema/schema.sql",
      "content": "\n\nSET statement_timeout = 0;\nSET lock_timeout = 0;\nSET idle_in_transaction_session_timeout = 0;\nSET client_encoding = 'UTF8';\nSET standard_conforming_strings = on;\nSELECT pg_catalog.set_config('search_path', '', false);\nSET check_function_bodies = false;\nSET xmloption = content;\nSET client_min_messages = warning;\nSET row_security = off;\n\n\nCREATE EXTENSION IF NOT EXISTS \"pg_net\" WITH SCHEMA \"extensions\";\n\n\n\n\n\n\nCREATE EXTENSION IF NOT EXISTS \"pgsodium\";\n\n\n\n\n\n\nCOMMENT ON SCHEMA \"public\" IS 'standard public schema';\n\n\n\nCREATE EXTENSION IF NOT EXISTS \"pg_graphql\" WITH SCHEMA \"graphql\";\n\n\n\n\n\n\nCREATE EXTENSION IF NOT EXISTS \"pg_stat_statements\" WITH SCHEMA \"extensions\";\n\n\n\n\n\n\nCREATE EXTENSION IF NOT EXISTS \"pgcrypto\" WITH SCHEMA \"extensions\";\n\n\n\n\n\n\nCREATE EXTENSION IF NOT EXISTS \"pgjwt\" WITH SCHEMA \"extensions\";\n\n\n\n\n\n\nCREATE EXTENSION IF NOT EXISTS \"supabase_vault\" WITH SCHEMA \"vault\";\n\n\n\n\n\n\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\" WITH SCHEMA \"extensions\";\n\n\n\n\n\n\nCREATE TYPE \"public\".\"CategoryEnum\" AS ENUM (\n    'MIGRATION_SAFETY',\n    'DATA_INTEGRITY',\n    'PERFORMANCE_IMPACT',\n    'PROJECT_RULES_CONSISTENCY',\n    'SECURITY_OR_SCALABILITY'\n);\n\n\nALTER TYPE \"public\".\"CategoryEnum\" OWNER TO \"postgres\";\n\n\nCREATE TYPE \"public\".\"KnowledgeType\" AS ENUM (\n    'SCHEMA',\n    'DOCS'\n);\n\n\nALTER TYPE \"public\".\"KnowledgeType\" OWNER TO \"postgres\";\n\n\nCREATE TYPE \"public\".\"SeverityEnum\" AS ENUM (\n    'CRITICAL',\n    'WARNING',\n    'POSITIVE',\n    'QUESTION'\n);\n\n\nALTER TYPE \"public\".\"SeverityEnum\" OWNER TO \"postgres\";\n\nSET default_tablespace = '';\n\nSET default_table_access_method = \"heap\";\n\n\nCREATE TABLE IF NOT EXISTS \"public\".\"GitHubDocFilePath\" (\n    \"id\" integer NOT NULL,\n    \"path\" \"text\" NOT NULL,\n    \"isReviewEnabled\" boolean DEFAULT true NOT NULL,\n    \"projectId\" integer NOT NULL,\n    \"createdAt\" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL\n);\n\n\nALTER TABLE \"public\".\"GitHubDocFilePath\" OWNER TO \"postgres\";\n\n\nCREATE SEQUENCE IF NOT EXISTS \"public\".\"GitHubDocFilePath_id_seq\"\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\n\nALTER TABLE \"public\".\"GitHubDocFilePath_id_seq\" OWNER TO \"postgres\";\n\n\nALTER SEQUENCE \"public\".\"GitHubDocFilePath_id_seq\" OWNED BY \"public\".\"GitHubDocFilePath\".\"id\";\n\n\n\nCREATE TABLE IF NOT EXISTS \"public\".\"GitHubSchemaFilePath\" (\n    \"id\" integer NOT NULL,\n    \"path\" \"text\" NOT NULL,\n    \"projectId\" integer NOT NULL,\n    \"createdAt\" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL\n);\n\n\nALTER TABLE \"public\".\"GitHubSchemaFilePath\" OWNER TO \"postgres\";\n\n\nCREATE SEQUENCE IF NOT EXISTS \"public\".\"GitHubSchemaFilePath_id_seq\"\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\n\nALTER TABLE \"public\".\"GitHubSchemaFilePath_id_seq\" OWNER TO \"postgres\";\n\n\nALTER SEQUENCE \"public\".\"GitHubSchemaFilePath_id_seq\" OWNED BY \"public\".\"GitHubSchemaFilePath\".\"id\";\n\n\n\nCREATE TABLE IF NOT EXISTS \"public\".\"KnowledgeSuggestion\" (\n    \"id\" integer NOT NULL,\n    \"type\" \"public\".\"KnowledgeType\" NOT NULL,\n    \"title\" \"text\" NOT NULL,\n    \"path\" \"text\" NOT NULL,\n    \"content\" \"text\" NOT NULL,\n    \"fileSha\" \"text\",\n    \"projectId\" integer NOT NULL,\n    \"approvedAt\" timestamp(3) without time zone,\n    \"createdAt\" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL,\n    \"branchName\" \"text\" NOT NULL,\n    \"traceId\" \"text\"\n);\n\n\nALTER TABLE \"public\".\"KnowledgeSuggestion\" OWNER TO \"postgres\";\n\n\nCREATE SEQUENCE IF NOT EXISTS \"public\".\"KnowledgeSuggestion_id_seq\"\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\n\nALTER TABLE \"public\".\"KnowledgeSuggestion_id_seq\" OWNER TO \"postgres\";\n\n\nALTER SEQUENCE \"public\".\"KnowledgeSuggestion_id_seq\" OWNED BY \"public\".\"KnowledgeSuggestion\".\"id\";\n\n\n\nCREATE TABLE IF NOT EXISTS \"public\".\"Migration\" (\n    \"id\" integer NOT NULL,\n    \"title\" \"text\" NOT NULL,\n    \"pullRequestId\" integer NOT NULL,\n    \"createdAt\" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL\n);\n\n\nALTER TABLE \"public\".\"Migration\" OWNER TO \"postgres\";\n\n\nCREATE SEQUENCE IF NOT EXISTS \"public\".\"Migration_id_seq\"\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\n\nALTER TABLE \"public\".\"Migration_id_seq\" OWNER TO \"postgres\";\n\n\nALTER SEQUENCE \"public\".\"Migration_id_seq\" OWNED BY \"public\".\"Migration\".\"id\";\n\n\n\nCREATE TABLE IF NOT EXISTS \"public\".\"OverallReview\" (\n    \"id\" integer NOT NULL,\n    \"projectId\" integer,\n    \"pullRequestId\" integer NOT NULL,\n    \"reviewComment\" \"text\",\n    \"reviewedAt\" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,\n    \"createdAt\" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL,\n    \"branchName\" \"text\" NOT NULL,\n    \"traceId\" \"text\"\n);\n\n\nALTER TABLE \"public\".\"OverallReview\" OWNER TO \"postgres\";\n\n\nCREATE SEQUENCE IF NOT EXISTS \"public\".\"OverallReview_id_seq\"\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\n\nALTER TABLE \"public\".\"OverallReview_id_seq\" OWNER TO \"postgres\";\n\n\nALTER SEQUENCE \"public\".\"OverallReview_id_seq\" OWNED BY \"public\".\"OverallReview\".\"id\";\n\n\n\nCREATE TABLE IF NOT EXISTS \"public\".\"Project\" (\n    \"id\" integer NOT NULL,\n    \"name\" \"text\" NOT NULL,\n    \"createdAt\" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL\n);\n\n\nALTER TABLE \"public\".\"Project\" OWNER TO \"postgres\";\n\n\nCREATE TABLE IF NOT EXISTS \"public\".\"ProjectRepositoryMapping\" (\n    \"id\" integer NOT NULL,\n    \"projectId\" integer NOT NULL,\n    \"repositoryId\" integer NOT NULL,\n    \"createdAt\" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL\n);\n\n\nALTER TABLE \"public\".\"ProjectRepositoryMapping\" OWNER TO \"postgres\";\n\n\nCREATE SEQUENCE IF NOT EXISTS \"public\".\"ProjectRepositoryMapping_id_seq\"\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\n\nALTER TABLE \"public\".\"ProjectRepositoryMapping_id_seq\" OWNER TO \"postgres\";\n\n\nALTER SEQUENCE \"public\".\"ProjectRepositoryMapping_id_seq\" OWNED BY \"public\".\"ProjectRepositoryMapping\".\"id\";\n\n\n\nCREATE SEQUENCE IF NOT EXISTS \"public\".\"Project_id_seq\"\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\n\nALTER TABLE \"public\".\"Project_id_seq\" OWNER TO \"postgres\";\n\n\nALTER SEQUENCE \"public\".\"Project_id_seq\" OWNED BY \"public\".\"Project\".\"id\";\n\n\n\nCREATE TABLE IF NOT EXISTS \"public\".\"PullRequest\" (\n    \"id\" integer NOT NULL,\n    \"pullNumber\" bigint NOT NULL,\n    \"commentId\" bigint,\n    \"createdAt\" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL,\n    \"repositoryId\" integer NOT NULL\n);\n\n\nALTER TABLE \"public\".\"PullRequest\" OWNER TO \"postgres\";\n\n\nCREATE SEQUENCE IF NOT EXISTS \"public\".\"PullRequest_id_seq\"\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\n\nALTER TABLE \"public\".\"PullRequest_id_seq\" OWNER TO \"postgres\";\n\n\nALTER SEQUENCE \"public\".\"PullRequest_id_seq\" OWNED BY \"public\".\"PullRequest\".\"id\";\n\n\n\nCREATE TABLE IF NOT EXISTS \"public\".\"Repository\" (\n    \"id\" integer NOT NULL,\n    \"name\" \"text\" NOT NULL,\n    \"owner\" \"text\" NOT NULL,\n    \"installationId\" bigint NOT NULL,\n    \"isActive\" boolean DEFAULT true NOT NULL,\n    \"createdAt\" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL\n);\n\n\nALTER TABLE \"public\".\"Repository\" OWNER TO \"postgres\";\n\n\nCREATE SEQUENCE IF NOT EXISTS \"public\".\"Repository_id_seq\"\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\n\nALTER TABLE \"public\".\"Repository_id_seq\" OWNER TO \"postgres\";\n\n\nALTER SEQUENCE \"public\".\"Repository_id_seq\" OWNED BY \"public\".\"Repository\".\"id\";\n\n\n\nCREATE TABLE IF NOT EXISTS \"public\".\"ReviewIssue\" (\n    \"id\" integer NOT NULL,\n    \"overallReviewId\" integer NOT NULL,\n    \"category\" \"public\".\"CategoryEnum\" NOT NULL,\n    \"severity\" \"public\".\"SeverityEnum\" NOT NULL,\n    \"description\" \"text\" NOT NULL,\n    \"createdAt\" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL,\n    \"suggestion\" \"text\" NOT NULL\n);\n\n\nALTER TABLE \"public\".\"ReviewIssue\" OWNER TO \"postgres\";\n\n\nCREATE SEQUENCE IF NOT EXISTS \"public\".\"ReviewIssue_id_seq\"\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\n\nALTER TABLE \"public\".\"ReviewIssue_id_seq\" OWNER TO \"postgres\";\n\n\nALTER SEQUENCE \"public\".\"ReviewIssue_id_seq\" OWNED BY \"public\".\"ReviewIssue\".\"id\";\n\n\n\nCREATE TABLE IF NOT EXISTS \"public\".\"_prisma_migrations\" (\n    \"id\" character varying(36) NOT NULL,\n    \"checksum\" character varying(64) NOT NULL,\n    \"finished_at\" timestamp with time zone,\n    \"migration_name\" character varying(255) NOT NULL,\n    \"logs\" \"text\",\n    \"rolled_back_at\" timestamp with time zone,\n    \"started_at\" timestamp with time zone DEFAULT \"now\"() NOT NULL,\n    \"applied_steps_count\" integer DEFAULT 0 NOT NULL\n);\n\n\nALTER TABLE \"public\".\"_prisma_migrations\" OWNER TO \"postgres\";\n\n\nALTER TABLE ONLY \"public\".\"GitHubDocFilePath\" ALTER COLUMN \"id\" SET DEFAULT \"nextval\"('\"public\".\"GitHubDocFilePath_id_seq\"'::\"regclass\");\n\n\n\nALTER TABLE ONLY \"public\".\"GitHubSchemaFilePath\" ALTER COLUMN \"id\" SET DEFAULT \"nextval\"('\"public\".\"GitHubSchemaFilePath_id_seq\"'::\"regclass\");\n\n\n\nALTER TABLE ONLY \"public\".\"KnowledgeSuggestion\" ALTER COLUMN \"id\" SET DEFAULT \"nextval\"('\"public\".\"KnowledgeSuggestion_id_seq\"'::\"regclass\");\n\n\n\nALTER TABLE ONLY \"public\".\"Migration\" ALTER COLUMN \"id\" SET DEFAULT \"nextval\"('\"public\".\"Migration_id_seq\"'::\"regclass\");\n\n\n\nALTER TABLE ONLY \"public\".\"OverallReview\" ALTER COLUMN \"id\" SET DEFAULT \"nextval\"('\"public\".\"OverallReview_id_seq\"'::\"regclass\");\n\n\n\nALTER TABLE ONLY \"public\".\"Project\" ALTER COLUMN \"id\" SET DEFAULT \"nextval\"('\"public\".\"Project_id_seq\"'::\"regclass\");\n\n\n\nALTER TABLE ONLY \"public\".\"ProjectRepositoryMapping\" ALTER COLUMN \"id\" SET DEFAULT \"nextval\"('\"public\".\"ProjectRepositoryMapping_id_seq\"'::\"regclass\");\n\n\n\nALTER TABLE ONLY \"public\".\"PullRequest\" ALTER COLUMN \"id\" SET DEFAULT \"nextval\"('\"public\".\"PullRequest_id_seq\"'::\"regclass\");\n\n\n\nALTER TABLE ONLY \"public\".\"Repository\" ALTER COLUMN \"id\" SET DEFAULT \"nextval\"('\"public\".\"Repository_id_seq\"'::\"regclass\");\n\n\n\nALTER TABLE ONLY \"public\".\"ReviewIssue\" ALTER COLUMN \"id\" SET DEFAULT \"nextval\"('\"public\".\"ReviewIssue_id_seq\"'::\"regclass\");\n\n\n\n\nALTER TABLE ONLY \"public\".\"GitHubDocFilePath\"\n    ADD CONSTRAINT \"GitHubDocFilePath_pkey\" PRIMARY KEY (\"id\");\n\n\n\nALTER TABLE ONLY \"public\".\"GitHubSchemaFilePath\"\n    ADD CONSTRAINT \"GitHubSchemaFilePath_path_projectId_key\" UNIQUE (\"path\", \"projectId\");\n\n\n\nALTER TABLE ONLY \"public\".\"GitHubSchemaFilePath\"\n    ADD CONSTRAINT \"GitHubSchemaFilePath_pkey\" PRIMARY KEY (\"id\");\n\n\n\nALTER TABLE ONLY \"public\".\"KnowledgeSuggestion\"\n    ADD CONSTRAINT \"KnowledgeSuggestion_pkey\" PRIMARY KEY (\"id\");\n\n\n\nALTER TABLE ONLY \"public\".\"Migration\"\n    ADD CONSTRAINT \"Migration_pkey\" PRIMARY KEY (\"id\");\n\n\n\nALTER TABLE ONLY \"public\".\"OverallReview\"\n    ADD CONSTRAINT \"OverallReview_pkey\" PRIMARY KEY (\"id\");\n\n\n\nALTER TABLE ONLY \"public\".\"ProjectRepositoryMapping\"\n    ADD CONSTRAINT \"ProjectRepositoryMapping_pkey\" PRIMARY KEY (\"id\");\n\n\n\nALTER TABLE ONLY \"public\".\"Project\"\n    ADD CONSTRAINT \"Project_pkey\" PRIMARY KEY (\"id\");\n\n\n\nALTER TABLE ONLY \"public\".\"PullRequest\"\n    ADD CONSTRAINT \"PullRequest_pkey\" PRIMARY KEY (\"id\");\n\n\n\nALTER TABLE ONLY \"public\".\"Repository\"\n    ADD CONSTRAINT \"Repository_pkey\" PRIMARY KEY (\"id\");\n\n\n\nALTER TABLE ONLY \"public\".\"ReviewIssue\"\n    ADD CONSTRAINT \"ReviewIssue_pkey\" PRIMARY KEY (\"id\");\n\n\n\nALTER TABLE ONLY \"public\".\"_prisma_migrations\"\n    ADD CONSTRAINT \"_prisma_migrations_pkey\" PRIMARY KEY (\"id\");\n\n\n\nCREATE UNIQUE INDEX \"GitHubDocFilePath_path_projectId_key\" ON \"public\".\"GitHubDocFilePath\" USING \"btree\" (\"path\", \"projectId\");\n\n\n\nCREATE UNIQUE INDEX \"Migration_pullRequestId_key\" ON \"public\".\"Migration\" USING \"btree\" (\"pullRequestId\");\n\n\n\nCREATE UNIQUE INDEX \"ProjectRepositoryMapping_projectId_repositoryId_key\" ON \"public\".\"ProjectRepositoryMapping\" USING \"btree\" (\"projectId\", \"repositoryId\");\n\n\n\nCREATE UNIQUE INDEX \"PullRequest_repositoryId_pullNumber_key\" ON \"public\".\"PullRequest\" USING \"btree\" (\"repositoryId\", \"pullNumber\");\n\n\n\nCREATE UNIQUE INDEX \"Repository_owner_name_key\" ON \"public\".\"Repository\" USING \"btree\" (\"owner\", \"name\");\n\n\n\nALTER TABLE ONLY \"public\".\"GitHubDocFilePath\"\n    ADD CONSTRAINT \"GitHubDocFilePath_projectId_fkey\" FOREIGN KEY (\"projectId\") REFERENCES \"public\".\"Project\"(\"id\") ON UPDATE CASCADE ON DELETE RESTRICT;\n\n\n\nALTER TABLE ONLY \"public\".\"GitHubSchemaFilePath\"\n    ADD CONSTRAINT \"GitHubSchemaFilePath_projectId_fkey\" FOREIGN KEY (\"projectId\") REFERENCES \"public\".\"Project\"(\"id\") ON UPDATE CASCADE ON DELETE RESTRICT;\n\n\n\nALTER TABLE ONLY \"public\".\"KnowledgeSuggestion\"\n    ADD CONSTRAINT \"KnowledgeSuggestion_projectId_fkey\" FOREIGN KEY (\"projectId\") REFERENCES \"public\".\"Project\"(\"id\") ON UPDATE CASCADE ON DELETE RESTRICT;\n\n\n\nALTER TABLE ONLY \"public\".\"Migration\"\n    ADD CONSTRAINT \"Migration_pullRequestId_fkey\" FOREIGN KEY (\"pullRequestId\") REFERENCES \"public\".\"PullRequest\"(\"id\") ON UPDATE CASCADE ON DELETE RESTRICT;\n\n\n\nALTER TABLE ONLY \"public\".\"OverallReview\"\n    ADD CONSTRAINT \"OverallReview_projectId_fkey\" FOREIGN KEY (\"projectId\") REFERENCES \"public\".\"Project\"(\"id\") ON UPDATE CASCADE ON DELETE SET NULL;\n\n\n\nALTER TABLE ONLY \"public\".\"OverallReview\"\n    ADD CONSTRAINT \"OverallReview_pullRequestId_fkey\" FOREIGN KEY (\"pullRequestId\") REFERENCES \"public\".\"PullRequest\"(\"id\") ON UPDATE CASCADE ON DELETE RESTRICT;\n\n\n\nALTER TABLE ONLY \"public\".\"ProjectRepositoryMapping\"\n    ADD CONSTRAINT \"ProjectRepositoryMapping_projectId_fkey\" FOREIGN KEY (\"projectId\") REFERENCES \"public\".\"Project\"(\"id\") ON UPDATE CASCADE ON DELETE RESTRICT;\n\n\n\nALTER TABLE ONLY \"public\".\"ProjectRepositoryMapping\"\n    ADD CONSTRAINT \"ProjectRepositoryMapping_repositoryId_fkey\" FOREIGN KEY (\"repositoryId\") REFERENCES \"public\".\"Repository\"(\"id\") ON UPDATE CASCADE ON DELETE RESTRICT;\n\n\n\nALTER TABLE ONLY \"public\".\"PullRequest\"\n    ADD CONSTRAINT \"PullRequest_repositoryId_fkey\" FOREIGN KEY (\"repositoryId\") REFERENCES \"public\".\"Repository\"(\"id\") ON UPDATE CASCADE ON DELETE RESTRICT;\n\n\n\nALTER TABLE ONLY \"public\".\"ReviewIssue\"\n    ADD CONSTRAINT \"ReviewIssue_overallReviewId_fkey\" FOREIGN KEY (\"overallReviewId\") REFERENCES \"public\".\"OverallReview\"(\"id\") ON UPDATE CASCADE ON DELETE RESTRICT;\n\n\n\nALTER PUBLICATION \"supabase_realtime\" OWNER TO \"postgres\";\n\n\n\n\n\nGRANT USAGE ON SCHEMA \"public\" TO \"postgres\";\nGRANT USAGE ON SCHEMA \"public\" TO \"anon\";\nGRANT USAGE ON SCHEMA \"public\" TO \"authenticated\";\nGRANT USAGE ON SCHEMA \"public\" TO \"service_role\";\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGRANT ALL ON TABLE \"public\".\"GitHubDocFilePath\" TO \"anon\";\nGRANT ALL ON TABLE \"public\".\"GitHubDocFilePath\" TO \"authenticated\";\nGRANT ALL ON TABLE \"public\".\"GitHubDocFilePath\" TO \"service_role\";\n\n\n\nGRANT ALL ON SEQUENCE \"public\".\"GitHubDocFilePath_id_seq\" TO \"anon\";\nGRANT ALL ON SEQUENCE \"public\".\"GitHubDocFilePath_id_seq\" TO \"authenticated\";\nGRANT ALL ON SEQUENCE \"public\".\"GitHubDocFilePath_id_seq\" TO \"service_role\";\n\n\n\nGRANT ALL ON TABLE \"public\".\"GitHubSchemaFilePath\" TO \"anon\";\nGRANT ALL ON TABLE \"public\".\"GitHubSchemaFilePath\" TO \"authenticated\";\nGRANT ALL ON TABLE \"public\".\"GitHubSchemaFilePath\" TO \"service_role\";\n\n\n\nGRANT ALL ON SEQUENCE \"public\".\"GitHubSchemaFilePath_id_seq\" TO \"anon\";\nGRANT ALL ON SEQUENCE \"public\".\"GitHubSchemaFilePath_id_seq\" TO \"authenticated\";\nGRANT ALL ON SEQUENCE \"public\".\"GitHubSchemaFilePath_id_seq\" TO \"service_role\";\n\n\n\nGRANT ALL ON TABLE \"public\".\"KnowledgeSuggestion\" TO \"anon\";\nGRANT ALL ON TABLE \"public\".\"KnowledgeSuggestion\" TO \"authenticated\";\nGRANT ALL ON TABLE \"public\".\"KnowledgeSuggestion\" TO \"service_role\";\n\n\n\nGRANT ALL ON SEQUENCE \"public\".\"KnowledgeSuggestion_id_seq\" TO \"anon\";\nGRANT ALL ON SEQUENCE \"public\".\"KnowledgeSuggestion_id_seq\" TO \"authenticated\";\nGRANT ALL ON SEQUENCE \"public\".\"KnowledgeSuggestion_id_seq\" TO \"service_role\";\n\n\n\nGRANT ALL ON TABLE \"public\".\"Migration\" TO \"anon\";\nGRANT ALL ON TABLE \"public\".\"Migration\" TO \"authenticated\";\nGRANT ALL ON TABLE \"public\".\"Migration\" TO \"service_role\";\n\n\n\nGRANT ALL ON SEQUENCE \"public\".\"Migration_id_seq\" TO \"anon\";\nGRANT ALL ON SEQUENCE \"public\".\"Migration_id_seq\" TO \"authenticated\";\nGRANT ALL ON SEQUENCE \"public\".\"Migration_id_seq\" TO \"service_role\";\n\n\n\nGRANT ALL ON TABLE \"public\".\"OverallReview\" TO \"anon\";\nGRANT ALL ON TABLE \"public\".\"OverallReview\" TO \"authenticated\";\nGRANT ALL ON TABLE \"public\".\"OverallReview\" TO \"service_role\";\n\n\n\nGRANT ALL ON SEQUENCE \"public\".\"OverallReview_id_seq\" TO \"anon\";\nGRANT ALL ON SEQUENCE \"public\".\"OverallReview_id_seq\" TO \"authenticated\";\nGRANT ALL ON SEQUENCE \"public\".\"OverallReview_id_seq\" TO \"service_role\";\n\n\n\nGRANT ALL ON TABLE \"public\".\"Project\" TO \"anon\";\nGRANT ALL ON TABLE \"public\".\"Project\" TO \"authenticated\";\nGRANT ALL ON TABLE \"public\".\"Project\" TO \"service_role\";\n\n\n\nGRANT ALL ON TABLE \"public\".\"ProjectRepositoryMapping\" TO \"anon\";\nGRANT ALL ON TABLE \"public\".\"ProjectRepositoryMapping\" TO \"authenticated\";\nGRANT ALL ON TABLE \"public\".\"ProjectRepositoryMapping\" TO \"service_role\";\n\n\n\nGRANT ALL ON SEQUENCE \"public\".\"ProjectRepositoryMapping_id_seq\" TO \"anon\";\nGRANT ALL ON SEQUENCE \"public\".\"ProjectRepositoryMapping_id_seq\" TO \"authenticated\";\nGRANT ALL ON SEQUENCE \"public\".\"ProjectRepositoryMapping_id_seq\" TO \"service_role\";\n\n\n\nGRANT ALL ON SEQUENCE \"public\".\"Project_id_seq\" TO \"anon\";\nGRANT ALL ON SEQUENCE \"public\".\"Project_id_seq\" TO \"authenticated\";\nGRANT ALL ON SEQUENCE \"public\".\"Project_id_seq\" TO \"service_role\";\n\n\n\nGRANT ALL ON TABLE \"public\".\"PullRequest\" TO \"anon\";\nGRANT ALL ON TABLE \"public\".\"PullRequest\" TO \"authenticated\";\nGRANT ALL ON TABLE \"public\".\"PullRequest\" TO \"service_role\";\n\n\n\nGRANT ALL ON SEQUENCE \"public\".\"PullRequest_id_seq\" TO \"anon\";\nGRANT ALL ON SEQUENCE \"public\".\"PullRequest_id_seq\" TO \"authenticated\";\nGRANT ALL ON SEQUENCE \"public\".\"PullRequest_id_seq\" TO \"service_role\";\n\n\n\nGRANT ALL ON TABLE \"public\".\"Repository\" TO \"anon\";\nGRANT ALL ON TABLE \"public\".\"Repository\" TO \"authenticated\";\nGRANT ALL ON TABLE \"public\".\"Repository\" TO \"service_role\";\n\n\n\nGRANT ALL ON SEQUENCE \"public\".\"Repository_id_seq\" TO \"anon\";\nGRANT ALL ON SEQUENCE \"public\".\"Repository_id_seq\" TO \"authenticated\";\nGRANT ALL ON SEQUENCE \"public\".\"Repository_id_seq\" TO \"service_role\";\n\n\n\nGRANT ALL ON TABLE \"public\".\"ReviewIssue\" TO \"anon\";\nGRANT ALL ON TABLE \"public\".\"ReviewIssue\" TO \"authenticated\";\nGRANT ALL ON TABLE \"public\".\"ReviewIssue\" TO \"service_role\";\n\n\n\nGRANT ALL ON SEQUENCE \"public\".\"ReviewIssue_id_seq\" TO \"anon\";\nGRANT ALL ON SEQUENCE \"public\".\"ReviewIssue_id_seq\" TO \"authenticated\";\nGRANT ALL ON SEQUENCE \"public\".\"ReviewIssue_id_seq\" TO \"service_role\";\n\n\n\nALTER DEFAULT PRIVILEGES FOR ROLE \"postgres\" IN SCHEMA \"public\" GRANT ALL ON SEQUENCES  TO \"postgres\";\nALTER DEFAULT PRIVILEGES FOR ROLE \"postgres\" IN SCHEMA \"public\" GRANT ALL ON SEQUENCES  TO \"anon\";\nALTER DEFAULT PRIVILEGES FOR ROLE \"postgres\" IN SCHEMA \"public\" GRANT ALL ON SEQUENCES  TO \"authenticated\";\nALTER DEFAULT PRIVILEGES FOR ROLE \"postgres\" IN SCHEMA \"public\" GRANT ALL ON SEQUENCES  TO \"service_role\";\n\n\n\n\n\n\nALTER DEFAULT PRIVILEGES FOR ROLE \"postgres\" IN SCHEMA \"public\" GRANT ALL ON FUNCTIONS  TO \"postgres\";\nALTER DEFAULT PRIVILEGES FOR ROLE \"postgres\" IN SCHEMA \"public\" GRANT ALL ON FUNCTIONS  TO \"anon\";\nALTER DEFAULT PRIVILEGES FOR ROLE \"postgres\" IN SCHEMA \"public\" GRANT ALL ON FUNCTIONS  TO \"authenticated\";\nALTER DEFAULT PRIVILEGES FOR ROLE \"postgres\" IN SCHEMA \"public\" GRANT ALL ON FUNCTIONS  TO \"service_role\";\n\n\n\n\n\n\nALTER DEFAULT PRIVILEGES FOR ROLE \"postgres\" IN SCHEMA \"public\" GRANT ALL ON TABLES  TO \"postgres\";\nALTER DEFAULT PRIVILEGES FOR ROLE \"postgres\" IN SCHEMA \"public\" GRANT ALL ON TABLES  TO \"anon\";\nALTER DEFAULT PRIVILEGES FOR ROLE \"postgres\" IN SCHEMA \"public\" GRANT ALL ON TABLES  TO \"authenticated\";\nALTER DEFAULT PRIVILEGES FOR ROLE \"postgres\" IN SCHEMA \"public\" GRANT ALL ON TABLES  TO \"service_role\";\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRESET ALL;"
    },
    "fileChanges": [
      {
        "filename": "frontend/apps/app/features/projects/actions/approveKnowledgeSuggestion.ts",
        "status": "modified",
        "changes": 13,
        "patch": "@@ -18,7 +18,6 @@ const formDataSchema = v.object({\n v.string(),\n v.transform((value) => Number(value)),\n ),\n- branch: v.string(),\n })\n \n export const approveKnowledgeSuggestion = async (formData: FormData) => {\n@@ -28,7 +27,6 @@ export const approveKnowledgeSuggestion = async (formData: FormData) => {\n repositoryOwner: formData.get('repositoryOwner'),\n repositoryName: formData.get('repositoryName'),\n installationId: formData.get('installationId'),\n- branch: formData.get('branch') ?? 'tmp-knowledge-suggestion',\n }\n \n const parsedData = v.safeParse(formDataSchema, formDataObject)\n@@ -37,13 +35,8 @@ export const approveKnowledgeSuggestion = async (formData: FormData) => {\n throw new Error(`Invalid form data: ${JSON.stringify(parsedData.issues)}`)\n }\n \n- const {\n- suggestionId,\n- repositoryOwner,\n- repositoryName,\n- installationId,\n- branch,\n- } = parsedData.output\n+ const { suggestionId, repositoryOwner, repositoryName, installationId } =\n+ parsedData.output\n \n try {\n // Get the knowledge suggestion\n@@ -66,7 +59,7 @@ export const approveKnowledgeSuggestion = async (formData: FormData) => {\n suggestion.fileSha,\n suggestion.title, // Use title as commit message\n installationId,\n- branch,\n+ suggestion.branchName,\n )\n \n if (!success) {"
      },
      {
        "filename": "frontend/packages/db/prisma/migrations/20250328105323_add_branch_name_to_knowledge_suggestion/migration.sql",
        "status": "added",
        "changes": 8,
        "patch": "@@ -0,0 +1,8 @@\n+/*\n+ Warnings:\n+\n+ - Added the required column `branchName` to the `KnowledgeSuggestion` table without a default value. This is not possible if the table is not empty.\n+\n+*/\n+-- AlterTable\n+ALTER TABLE \"KnowledgeSuggestion\" ADD COLUMN \"branchName\" TEXT NOT NULL;"
      },
      {
        "filename": "frontend/packages/db/prisma/schema.prisma",
        "status": "modified",
        "changes": 1,
        "patch": "@@ -131,6 +131,7 @@ model KnowledgeSuggestion {\n path String // Target file path\n content String // Full content of the new file\n fileSha String // SHA of the file to be updated\n+ branchName String // Branch name for GitHub operations\n projectId Int\n project Project @relation(fields: [projectId], references: [id])\n approvedAt DateTime? // Approval timestamp (null if not approved)"
      },
      {
        "filename": "frontend/packages/db/schema/schema.sql",
        "status": "modified",
        "changes": 3,
        "patch": "@@ -158,7 +158,8 @@ CREATE TABLE public.\"KnowledgeSuggestion\" (\n \"projectId\" integer NOT NULL,\n \"approvedAt\" timestamp(3) without time zone,\n \"createdAt\" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,\n- \"updatedAt\" timestamp(3) without time zone NOT NULL\n+ \"updatedAt\" timestamp(3) without time zone NOT NULL,\n+ \"branchName\" text NOT NULL\n );\n \n "
      },
      {
        "filename": "frontend/packages/db/supabase/database.types.ts",
        "status": "modified",
        "changes": 3,
        "patch": "@@ -178,6 +178,7 @@ export type Database = {\n KnowledgeSuggestion: {\n Row: {\n approvedAt: string | null\n+ branchName: string\n content: string\n createdAt: string\n fileSha: string\n@@ -190,6 +191,7 @@ export type Database = {\n }\n Insert: {\n approvedAt?: string | null\n+ branchName: string\n content: string\n createdAt?: string\n fileSha: string\n@@ -202,6 +204,7 @@ export type Database = {\n }\n Update: {\n approvedAt?: string | null\n+ branchName?: string\n content?: string\n createdAt?: string\n fileSha?: string"
      },
      {
        "filename": "frontend/packages/db/supabase/migrations/20250328105339_add_branch_name_to_knowledge_suggestion.sql",
        "status": "added",
        "changes": 1,
        "patch": "@@ -0,0 +1 @@\n+alter table \"public\".\"KnowledgeSuggestion\" add column \"branchName\" text not null;"
      },
      {
        "filename": "frontend/packages/github/src/api.server.ts",
        "status": "modified",
        "changes": 2,
        "patch": "@@ -181,7 +181,7 @@ export const updateFileContent = async (\n sha: string,\n message: string,\n installationId: number,\n- branch = 'tmp-knowledge-suggestion',\n+ branch: string,\n ): Promise<boolean> => {\n const [owner, repo] = repositoryFullName.split('/')\n "
      },
      {
        "filename": "frontend/packages/jobs/src/functions/processCreateKnowledgeSuggestion.ts",
        "status": "modified",
        "changes": 1,
        "patch": "@@ -77,6 +77,7 @@ export const processCreateKnowledgeSuggestion = async (\n content,\n fileSha,\n projectId,\n+ branchName: branch,\n },\n })\n "
      },
      {
        "filename": "memory-bank/progress.md",
        "status": "modified",
        "changes": 3,
        "patch": "@@ -11,6 +11,7 @@\n - Text document viewer page that renders raw text content from GitHub repositories.\n - Documentation list page that displays all GitHubDocFilePath entries for a project with links to individual document pages.\n - Supabase JS integration for database access in the document viewer page, with optimized queries using nested joins.\n+- Dynamic branch name management for KnowledgeSuggestion operations, replacing hardcoded branch names.\n \n ## What's Left to Build\n \n@@ -27,7 +28,7 @@ The project is currently focused on enhancing the Reviewer User experience, with\n \n The core review pipeline is now operational, connecting GitHub webhooks to AI-powered review generation and PR comment posting. This enables automatic review of database schema changes when pull requests are opened or updated.\n \n-The KnowledgeSuggestion feature is being implemented to allow AI-generated suggestions for Schema and Docs updates. The database model has been created, which will store suggestions that can be approved and then committed to GitHub using the GitHub API.\n+The KnowledgeSuggestion feature is being implemented to allow AI-generated suggestions for Schema and Docs updates. The database model has been created, which will store suggestions that can be approved and then committed to GitHub using the GitHub API. Recent improvements include adding a branchName column to the KnowledgeSuggestion table to replace hardcoded branch names with dynamic ones, making the system more flexible and maintainable.\n \n A new text document viewer page has been implemented at `/app/projects/[projectId]/docs/[branchOrCommit]/[...slug]` that fetches and displays raw text content from GitHub repositories. This page uses Supabase JS for database access instead of Prisma, demonstrating the flexibility of our data access layer. The implementation uses a single optimized query with nested joins to efficiently retrieve all necessary data. This serves as a prototype for the planned migration from Prisma to Supabase JS across the entire application."
      }
    ]
  }
}
