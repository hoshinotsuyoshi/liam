{
    "name": "liam-hq/liam/pull/1322",
    "assert": [
      {
        "type": "llm-rubric",
        "value": "The report mentions about renaming table"
      }
    ],
    "vars": 
{
    "docsContent": "# docs/schemaPatterns.md\n\n# Reusable patterns and rules for database schema design\n\n## General\n\n- Use lowercase for SQL reserved words to maintain consistency and readability.\n- Employ consistent, descriptive identifiers for tables, columns, and other database objects.\n- Use white space and indentation to enhance the readability of your code.\n- Store dates in ISO 8601 format (`yyyy-mm-ddThh:mm:ss.sssss`).\n- Include comments for complex logic, using `/* ... */` for block comments and `--` for line comments.\n\n## Naming Conventions\n\n- All table names should be singular (e.g., `KnowledgeSuggestionDocMapping`), using UpperCamelCase.\n- Fields should use lowerCamelCase for naming, ensuring clarity and consistency across the schema.\n\n### Tables\n\n- Avoid prefixes like 'tbl' and ensure no table name matches any of its column names.\n- Always add an `id` column of type `identity generated always` unless otherwise specified.\n- Create all tables in the `public` schema unless otherwise specified.\n- Always add the schema to SQL queries for clarity.\n- Always add a comment to describe what the table does. The comment can be up to 1024 characters.\n\n### Columns\n\n- Use singular names.\n- For references to foreign tables, use the singular of the table name with the `id` suffix. For example `userId` to reference the `User` table\n- Always use lowercase except in cases involving acronyms or when readability would be enhanced by an exception.\n\n#### Examples\n\n```sql\ncreate table \"public\".\"Book\" (\n  \"id\" bigint generated always as identity primary key,\n  \"title\" text not null,\n  \"authorId\" bigint references \"public\".\"Author\" (id)\n);\ncomment on table \"public\".\"Book\" is 'A list of all the books in the library.';\n```\n\n## Structural Modeling Patterns\n\n- Models should clearly define foreign key relationships with appropriate constraints to maintain referential integrity.\n\n## Preferred Types\n\n- Use ENUM types for fields that have a limited set of valid values, such as categories and severities, to promote consistency.\n\n\n---\n\n# docs/migrationOpsContext.md\n\n# Migration Operations Context\n\nOur project uses Supabase Branching for database migration management. This system integrates with our GitHub repository and automatically applies migrations when pull requests are merged to the main branch.\n\n## Deployment System\n\n- Supabase Branching automatically runs migrations when PRs merge to main.\n- Migrations in `frontend/packages/db/supabase/migrations` run sequentially by timestamp.\n\n## Key Constraints\n\n- No guaranteed order between app deployments and migrations.\n- Either app (`@liam-hq/app`, `@liam-hq/jobs`) or migrations may complete first.\n- Migrations must be backward compatible with the previous app version.\n- App must work with both old and new database schema.\n\n## Branching Workflow\n\n- Preview branches created automatically for PRs.\n- Each commit with migration changes triggers runs on preview instance.\n- Schema drift possible between multiple preview branches.\n\n## Safety Practices\n\n- Test all migrations thoroughly in preview branches.\n- Design for race conditions between app and database deployments.\n- Keep migrations small and focused.\n- Regularly merge from main to prevent schema divergence.\n- Monitor PR comments for deployment status.\n\n## Create migration\n\nThis project uses the migrations provided by the Supabase CLI.\n\n### Creating a migration file\n\nGiven the context of the user's message, create a database migration file inside the folder `frontend/packages/db/supabase/migrations/`.\n\nThe file MUST following this naming convention:\n\nThe file MUST be named in the format `YYYYMMDDHHmmss_short_description.sql` with proper casing for months, minutes, and seconds in UTC time:\n\n1. `YYYY` - Four digits for the year (e.g., `2024`).\n2. `MM` - Two digits for the month (01 to 12).\n3. `DD` - Two digits for the day of the month (01 to 31).\n4. `HH` - Two digits for the hour in 24-hour format (00 to 23).\n5. `mm` - Two digits for the minute (00 to 59).\n6. `ss` - Two digits for the second (00 to 59).\n7. Add an appropriate description for the migration.\n\nFor example:\n\n```\n20240906123045_create_profiles.sql\n```\n\n## SQL Guidelines\n\nWrite Postgres-compatible SQL code for Supabase migration files that:\n\n- Includes a header comment with metadata about the migration, such as the purpose, affected tables/columns, and any special considerations.\n- Includes thorough comments explaining the purpose and expected behavior of each migration step.\n- Write all SQL in lowercase.\n- Add copious comments for any destructive SQL commands, including truncating, dropping, or column alterations.\n- **Follow the schema design patterns and rules documented in [`docs/schemaPatterns.md`](./schemaPatterns.md)** for consistent database design.\n\nThe generated SQL code should be production-ready, well-documented, and aligned with Supabase's best practices.\n\n\n---\n\n# .ai-agents/memory-bank/productContext.md\n\n# Product Context\n\n## Purpose\nLiam Migration aims to address the challenges associated with complex DB schema changes by providing AI-assisted solutions that reduce risks and rework costs. It is designed to enable development teams to manage release cycles safely and efficiently.\n\n## Problems Solved\n- **Dilemma of Fast Development and Quality Assurance**: Frequent specification changes and accelerated implementation speed due to AI code generation lead to design deficiencies and technical debt, making it difficult to balance quality and development speed.\n- **Irreversibility Risk of DB Schema Changes**: Column deletions and type changes are difficult to roll back, increasing the fear of changes and causing overly cautious development cycles.\n- **Lack of Review Due to Personalization**: Limited members with DB design knowledge lead to a lack of review systems, causing development stagnation and difficulty in unifying design guidelines across teams.\n\n## How It Works\nLiam Migration provides a comprehensive solution that includes:\n- **Review Agent**: An AI component that automatically analyzes migration impact, visualizes risks, and predicts performance and data integrity impacts.\n- **Interactive Knowledge Base**: Promotes contextual understanding by linking review comments with ER diagrams and automatically extracts and formalizes team-specific best practices.\n- **Continuous Quality Optimization**: Establishes quality standards through the reuse of review comments and provides phased optimization according to project scale and maturity.\n\n## User Experience Goals\n- Provide a seamless and efficient review process for Reviewer Users, focusing on safety and speed in scaling DB schemas.\n- Ensure that Builder User features are developed in later phases, leveraging accumulated review data and feedback for future optimization.\n- Offer a user-friendly interface for reviewing migration changes, cautions, and AI suggestions, allowing users to understand review status and improvement points effectively.\n\n\n---\n\n# .ai-agents/memory-bank/projectbrief.md\n\n# Project Brief\n\n## Overview\nLiam Migration is a new solution designed to significantly reduce the risks and rework costs associated with complex DB schema changes through AI support and automated reviews. It enables development teams to safely and quickly manage release cycles. Beyond OSS-based ER diagram visualization, it offers migration diff checks and intelligent optimization suggestions at the Pull Request stage, achieving a balance between design quality and development speed.\n\n## Core Requirements and Goals\n- Reduce risks and rework costs in DB schema changes using AI support and automated reviews.\n- Enable safe and fast release cycles for development teams.\n- Provide migration diff checks and intelligent optimization suggestions at the Pull Request stage.\n- Achieve a balance between design quality and development speed.\n\n## Ubiquitous Language\n- **Liam Migration**: The product name. Reduces risks and rework costs associated with DB schema changes through AI support and automated reviews, enabling safe and fast development cycles.\n- **Project**: A management unit for database schemas, continuously updated through migrations, accumulating schema change history and design knowledge.\n- **Liam ERD**: An OSS-based tool for automatic generation and visualization of ER diagrams, developed before Liam Migration.\n- **Migration**: A series of operations to change the database schema (structure), including creating, modifying, and deleting tables and columns, transitioning the database to a new structure. In this product, it refers only to schema changes, not database or data migrations.\n- **Review Agent**: An AI component that automatically analyzes the impact range of migrations, predicting risks, performance, and data integrity impacts, improving review accuracy through continuous learning.\n- **Reviewer User**: A human role in the product. Validates and approves changes based on AI feedback and automatic analysis results, ensuring design safety and quality.\n- **Builder User**: A human role in the product. Responsible for executing DB schema changes (code generation and migration application). Initially focused on Reviewer, with phased implementation planned.\n- **Migration Review Page**: A dedicated interface for centrally reviewing detailed migration changes, cautions, and AI suggestions, allowing users to understand review status and improvement points.\n- **GitHub App**: A mechanism for automating and streamlining comments and review approvals on PRs through integration with GitHub repositories, supporting seamless development flow.\n\n## Background\n### Current Situation\n- Liam ERD has alleviated the pain of update costs and schema understanding at a level comparable to other similar tools, including OSS, through automatic generation and visualization of ER diagrams.\n- It has received high praise for \"UI/UX refinement,\" \"support for large tables,\" \"CI/CD integration,\" and \"automatic document updates.\"\n\n### Challenges\n- The proliferation of the free OSS version leads to \"star acquisition and user community expansion\" but lacks a clearly established monetization model.\n- Documentation and visualization alone make it difficult to differentiate from competing tools, making it challenging for companies to have a strong reason to adopt the paid version.\n\n### Future Direction\n- To answer the fundamental question of \"Why ERD now?\" and \"Why is it worth paying for?\" it is necessary to propose greater value.\n- Automating and enhancing tasks that are burdensome for developers, in addition to alleviating pain, will be key to creating new gains (dramatic improvements in productivity and design quality).\n- The phase of DB schema changes (migrations) is a challenging area with high rework costs and a tendency to become personalized, and it is not sufficiently solved by existing competing tools.\n- Therefore, high-value-added features such as AI-based schema reviews and diff analysis will be provided mainly in paid plans, aiming for a sustainable business model while coexisting with OSS.\n\n\n---\n\n# .ai-agents/memory-bank/systemPatterns.md\n\n# System Patterns\n\n## System Architecture\nLiam Migration is designed to integrate seamlessly with existing development workflows, particularly through its GitHub App integration. It leverages AI components to provide intelligent analysis and suggestions during the migration review process.\n\nThe project uses a monorepo structure managed with pnpm workspaces, allowing for maintenance of multiple packages and applications in a single repository while sharing dependencies and code.\n\n## Key Technical Decisions\n- **AI-Driven Analysis**: The use of AI to automatically analyze migration impacts, predict risks, and suggest optimizations is central to the product's value proposition.\n- **GitHub Integration**: The integration with GitHub repositories allows for automated comments and review approvals, streamlining the development process.\n- **OSS and Paid Plan Coexistence**: The product is designed to coexist with its OSS version, offering high-value features in paid plans to ensure a sustainable business model.\n- **Monorepo Structure**: The decision to use a monorepo structure with pnpm workspaces enables efficient code sharing and dependency management.\n- **TypeScript-First**: All components and functions are written in TypeScript to ensure type safety and improve developer experience.\n- **Database Access Strategy**: Using Supabase JS for database access to leverage Supabase's optimized query capabilities and standardize the data access layer. This requires careful handling of type compatibility issues, particularly with bigint fields and nested relationships.\n- **Type Safety Approach**: When working with Supabase, we use type assertions carefully to bridge the gap between the Supabase types and our application's expected types, particularly for nested queries and bigint fields.\n- **Schema File Management Strategy**: Using direct path comparison instead of pattern matching for schema file detection, with the GitHubSchemaFilePath table (renamed from WatchSchemaFilePattern) to store exact file paths.\n- **Standardized Supabase Client Usage**: Using a shared createClient function across the codebase to ensure consistent Supabase client creation and usage.\n\n## Design Patterns\n- **Modular Architecture**: The system is built with a modular architecture to allow for easy integration and extension of features.\n- **Function Separation**: Business logic is separated into dedicated function files that are called from task definitions, making the code more modular and testable.\n- **Task Pipeline**: A series of tasks are chained together to form a complete workflow, with each task responsible for a specific part of the process.\n- **Continuous Learning**: The AI components are designed to continuously learn from past reviews to improve accuracy and relevance over time.\n- **Component-Based UI**: The UI is built using a component-based approach with React, promoting reusability and maintainability.\n- **Server-Client Separation**: Clear separation of server and client components in Next.js, with appropriate data fetching responsibilities.\n- **Efficient Data Access**: The system uses Supabase JS for database access with optimized queries using nested joins for efficient data retrieval.\n- **Type-Safe Database Access**: When using Supabase, we implement type-safe queries by using type assertions to bridge the gap between Supabase's types and our application's expected types. This includes handling bigint to number conversions and properly typing nested relationship data.\n- **Intermediate Mapping Tables**: For many-to-many relationships between entities, we use intermediate mapping tables (e.g., OverallReviewKnowledgeSuggestionMapping, KnowledgeSuggestionDocMapping) to maintain clean separation of concerns and enable flexible relationship management.\n- **Transaction Management**: Moving away from manual rollback processing in server actions to a more robust approach using Supabase RPC for transaction management. This will provide a consistent and reliable way to handle database transactions across the application.\n- **Direct Path Comparison**: Using direct path comparison instead of pattern matching for schema file detection, providing a more precise and efficient approach to schema file management.\n- **Consistent Naming Conventions**: Using consistent naming conventions across the codebase, such as GitHubSchemaFilePath and GitHubDocFilePath for GitHub-integrated file management.\n- **Context-Enriched AI Prompts**: The AI review generation incorporates multiple sources of context (PR descriptions, comments, documentation, schema files, and code changes) to provide more comprehensive and relevant analysis.\n\n## Component Relationships\n- **GitHub Webhook Handler**: Receives webhook events from GitHub, extracts schema changes, and triggers the review process.\n- **Task Pipeline**: A series of tasks (savePullRequestTask → generateReviewTask → saveReviewTask → postCommentTask → generateDocsSuggestionTask/generateSchemaMetaSuggestionTask → createKnowledgeSuggestionTask) that process the schema changes, generate reviews, and create knowledge suggestions.\n- **Review Agent**: Works closely with the GitHub App to provide real-time analysis and feedback on migration changes.\n- **Migration Review Page**: Serves as the central interface for users to review detailed migration changes, AI suggestions, and improvement points.\n- **Interactive Knowledge Base**: Links review comments with ER diagrams to enhance contextual understanding and formalize best practices.\n- **Document Viewer**: Renders raw text content from GitHub repositories, providing a simple way to view documentation and other text files.\n- **Schema Metadata Generator**: Analyzes PR reviews and schema changes to generate metadata enhancements that improve the database structure without changing the core schema.\n\n## Repository Structure\nThe project follows a structured organization with clear separation of concerns:\n\n- **Apps**: Contains the main web applications (app, docs, erd-sample, migration-web)\n- **Packages**: Shared libraries and tools (cli, configs, db-structure, erd-core, ui)\n\nEach package has specific responsibilities and is designed to be modular and focused on specific functionality.\n\n\n---\n\n# .ai-agents/memory-bank/techContext.md\n\n# Technical Context\n\n## Technologies Used\n- **AI Components**: Utilized for analyzing migration impacts and providing intelligent suggestions.\n- **LangChain**: Framework for developing applications powered by language models, used for AI review generation and schema metadata suggestions. The project uses LangChain's ChatOpenAI integration for all prompt generators.\n- **OpenAI**: Provider of AI models used for generating schema reviews and metadata suggestions. The project specifically uses the 'o3-mini-2025-01-31' model for all prompt generators.\n- **Trigger.dev**: Task orchestration platform used for implementing the review pipeline and knowledge suggestion tasks.\n- **GitHub App**: Integrated to automate comments and review approvals on PRs, with enhanced API usage for fetching PR descriptions and comments.\n- **Supabase JS**: JavaScript client for Supabase, used for database access with support for optimized queries using nested joins.\n- **Supabase RPC**: Remote Procedure Call functionality in Supabase, planned for future implementation of robust transaction management across the application.\n- **AWS**: Deployed in the us-east-1 region for its high affinity with English-speaking markets and potential for future multi-region expansion.\n- **TypeScript**: Strongly-typed programming language that builds on JavaScript.\n- **React 18**: UI library for building component-based interfaces.\n- **Next.js 15**: React framework for server-rendered applications.\n- **Vite**: Build tool used in CLI for static site generation.\n- **Valtio**: State management.\n- **@xyflow/react (React Flow)**: Diagram visualization.\n- **Fumadocs**: Documentation site.\n- **CSS Modules**: For styling HTML elements with typed definitions.\n- **Radix UI**: For UI primitives.\n- **Lucide React**: For consistent iconography.\n\n## Development Setup\n- The product is integrated with existing development workflows through its GitHub App, allowing for seamless automation and review processes.\n- The system is designed to be modular, enabling easy integration and extension of features.\n- **Task Pipeline**: A series of tasks are chained together using Trigger.dev to form a complete review workflow, including schema metadata generation.\n- **Function Separation**: Business logic is separated into dedicated function files that are called from task definitions.\n- **Type Safety**: When working with Supabase, type assertions are used to bridge the gap between Supabase's types and the application's expected types, particularly for nested queries and bigint fields.\n- **Enhanced Prompt Structure**: AI prompts are structured to incorporate multiple sources of context, including PR descriptions, comments, documentation, schema files, and code changes. For schema metadata generation, prompts include the current schema metadata file content to enable incremental improvements rather than generating from scratch.\n- **Package Management**: pnpm for efficient dependency management.\n- **Monorepo Management**: pnpm workspaces.\n- **Build System**: Turborepo for optimized builds.\n- **Linting & Formatting**: \n  - Biome for code quality and formatting\n  - `pnpm fmt` command to format code according to project standards\n  - `pnpm lint` command to check for code quality issues and type errors\n- **Testing**: Vitest for unit testing, Playwright for e2e testing.\n  - **Supabase Testing Approach**: A direct testing approach is used with Supabase. We create real records in the database, run the actual functions with these records, and then clean up the test data afterwards. This provides more realistic tests that verify the actual functions with real database interactions, leveraging Supabase's ability to be executed directly in test environments.\n\n## Database Migration Workflow\n\n### Migration Documentation\n\nThe project maintains two key documents for database migrations:\n\n1. **Migration Operations Context** (`docs/migrationOpsContext.md`): Provides detailed guidance on the migration workflow, deployment system, key constraints, and SQL guidelines for creating migrations. This document explains how our project uses Supabase Branching for database migration management and outlines important safety practices.\n\n2. **Schema Patterns** (`docs/schemaPatterns.md`): Defines reusable patterns and rules for database schema design, including naming conventions, structural modeling patterns, and preferred types. This document ensures consistency in database design across the project.\n\nThese documents should be consulted when creating or reviewing database migrations to ensure adherence to project standards and best practices.\n\n### Schema Enhancements\n\nRecent schema enhancements include:\n\n1. **KnowledgeSuggestion Reasoning Field**: Added a `reasoning` TEXT field to the KnowledgeSuggestion table to store the rationale behind schema metadata update suggestions. This helps users understand the context and reasoning behind suggestions, enabling more informed decisions when approving them.\n\n### Supabase Migration Workflow\n\nThe migration workflow follows Supabase's recommended practices:\n\n1. **Creating a new migration**:\n   ```bash\n   pnpm supabase:migration:new <migration_name>\n   ```\n   This creates a new migration file in `supabase/migrations` directory.\n\n2. **Adding SQL to the migration file**:\n   Edit the generated migration file to include the necessary SQL statements for schema changes.\n\n3. **Applying migrations**:\n   ```bash\n   pnpm supabase:migration:up\n   ```\n   This applies any pending migrations to the database.\n\n4. **Diffing changes from the Dashboard**:\n   If changes are made through the Dashboard UI, they can be captured as migrations:\n   ```bash\n   pnpm supabase:migration -f <migration_name>\n   ```\n   This generates a migration file with the changes detected between the local database and the schema definition.\n\n5. **Resetting the database**:\n   ```bash\n   pnpm supabase:reset\n   ```\n   This resets the database to a clean state, reapplies all migrations, and seeds the database.\n\n### Seeding Data\n\nSeed data can be defined in `supabase/seed.sql`. This file is executed when resetting the database with `pnpm supabase:reset`.\n\n### Type Safety\n\nAfter schema changes, regenerate TypeScript types and SQL schema:\n```bash\npnpm supabase:gen\n```\nThis ensures type safety when working with Supabase queries, and generates the SQL schema for the database.\n\n## Code Implementation Guidelines\n- Use TypeScript for all components and functions.\n- Use early returns whenever possible to make the code more readable.\n- Always use CSS Modules for styling HTML elements.\n- Use descriptive variable and function/const names. Event functions should be named with a \"handle\" prefix.\n- Implement accessibility features on elements.\n- Use consts instead of functions (e.g., \"const toggle = () =>\") and define types when possible.\n- Do not code within the `page.tsx` file in Next.js App Router. Instead, create a separate `XXXPage` component.\n- Follow the `tsconfig.json` paths settings and always use the correct alias for import paths.\n- Align data fetching responsibilities with the component's role (server vs. client-side).\n\n## Component Implementation Guidelines\n- Avoid using `default export`; always use `named export`.\n- When styling, prioritize using CSS Variables from the `@liam-hq/ui` package.\n- Prefer using UI components provided by `@liam-hq/ui` over custom implementations.\n- When using icons, always import them from `@liam-hq/ui`.\n\n## Technical Constraints\n- The product must coexist with its OSS version, offering high-value features in paid plans to ensure a sustainable business model.\n- The AI components require continuous learning from past reviews to improve accuracy and relevance over time.\n- Type compatibility issues with Supabase require careful handling, particularly for bigint fields and nested relationships.\n- Schema metadata generation requires accurate analysis of database schema changes and proper integration with the knowledge suggestion system.\n- Supabase types need to be updated whenever database schema changes are made, to maintain type safety across the application.\n\n## Dependencies\n- **AWS**: Used for deployment, with a focus on the us-east-1 region.\n- **GitHub**: Essential for integration and automation of review processes.\n- **AI Services**: Required for the intelligent analysis and suggestion features.\n- **Vercel**: Deployment of web applications.\n- **GitHub Actions**: CI/CD for continuous integration.\n\n\n---\n\n# docs/migrationPatterns.md\n\n# Safe and Consistent Migration Strategies\n\n- Migrations should be designed to be atomic and reversible, with comprehensive transaction handling.\n- Implement robust error handling and validation checks in migration scripts to ensure data integrity.\n- Review each migration against existing patterns to ensure compliance with project standards.",
    "schemaFile": {
        "filename": "frontend/packages/db/schema/schema.sql",
        "content": "\n\nSET statement_timeout = 0;\nSET lock_timeout = 0;\nSET idle_in_transaction_session_timeout = 0;\nSET client_encoding = 'UTF8';\nSET standard_conforming_strings = on;\nSELECT pg_catalog.set_config('search_path', '', false);\nSET check_function_bodies = false;\nSET xmloption = content;\nSET client_min_messages = warning;\nSET row_security = off;\n\n\nCREATE EXTENSION IF NOT EXISTS \"pg_net\" WITH SCHEMA \"extensions\";\n\n\n\n\n\n\nCOMMENT ON SCHEMA \"public\" IS 'standard public schema';\n\n\n\nCREATE EXTENSION IF NOT EXISTS \"pg_graphql\" WITH SCHEMA \"graphql\";\n\n\n\n\n\n\nCREATE EXTENSION IF NOT EXISTS \"pg_stat_statements\" WITH SCHEMA \"extensions\";\n\n\n\n\n\n\nCREATE EXTENSION IF NOT EXISTS \"pgcrypto\" WITH SCHEMA \"extensions\";\n\n\n\n\n\n\nCREATE EXTENSION IF NOT EXISTS \"pgjwt\" WITH SCHEMA \"extensions\";\n\n\n\n\n\n\nCREATE EXTENSION IF NOT EXISTS \"supabase_vault\" WITH SCHEMA \"vault\";\n\n\n\n\n\n\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\" WITH SCHEMA \"extensions\";\n\n\n\n\n\n\nCREATE TYPE \"public\".\"CategoryEnum\" AS ENUM (\n    'MIGRATION_SAFETY',\n    'DATA_INTEGRITY',\n    'PERFORMANCE_IMPACT',\n    'PROJECT_RULES_CONSISTENCY',\n    'SECURITY_OR_SCALABILITY'\n);\n\n\nALTER TYPE \"public\".\"CategoryEnum\" OWNER TO \"postgres\";\n\n\nCREATE TYPE \"public\".\"KnowledgeType\" AS ENUM (\n    'SCHEMA',\n    'DOCS'\n);\n\n\nALTER TYPE \"public\".\"KnowledgeType\" OWNER TO \"postgres\";\n\n\nCREATE TYPE \"public\".\"SchemaFormatEnum\" AS ENUM (\n    'schemarb',\n    'postgres',\n    'prisma',\n    'tbls'\n);\n\n\nALTER TYPE \"public\".\"SchemaFormatEnum\" OWNER TO \"postgres\";\n\n\nCREATE TYPE \"public\".\"SeverityEnum\" AS ENUM (\n    'CRITICAL',\n    'WARNING',\n    'POSITIVE',\n    'QUESTION'\n);\n\n\nALTER TYPE \"public\".\"SeverityEnum\" OWNER TO \"postgres\";\n\n\nCREATE OR REPLACE FUNCTION \"public\".\"handle_new_user\"() RETURNS \"trigger\"\n    LANGUAGE \"plpgsql\" SECURITY DEFINER\n    SET \"search_path\" TO ''\n    AS $$\nBEGIN\n  INSERT INTO public.\"User\" (id, name, email)\n  VALUES (\n    NEW.id, \n    COALESCE(NEW.raw_user_meta_data->>'name', NEW.email),\n    NEW.email\n  );\n  RETURN NEW;\nEND;\n$$;\n\n\nALTER FUNCTION \"public\".\"handle_new_user\"() OWNER TO \"postgres\";\n\n\nCREATE OR REPLACE FUNCTION \"public\".\"sync_existing_users\"() RETURNS \"void\"\n    LANGUAGE \"plpgsql\" SECURITY DEFINER\n    AS $$\nBEGIN\n  INSERT INTO public.\"User\" (id, name, email)\n  SELECT \n    au.id,\n    COALESCE(au.raw_user_meta_data->>'name', au.email),\n    au.email\n  FROM auth.users au\n  LEFT JOIN public.\"User\" pu ON au.id = pu.id\n  WHERE pu.id IS NULL;\nEND;\n$$;\n\n\nALTER FUNCTION \"public\".\"sync_existing_users\"() OWNER TO \"postgres\";\n\nSET default_tablespace = '';\n\nSET default_table_access_method = \"heap\";\n\n\nCREATE TABLE IF NOT EXISTS \"public\".\"GitHubDocFilePath\" (\n    \"id\" integer NOT NULL,\n    \"path\" \"text\" NOT NULL,\n    \"isReviewEnabled\" boolean DEFAULT true NOT NULL,\n    \"projectId\" integer NOT NULL,\n    \"createdAt\" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL\n);\n\n\nALTER TABLE \"public\".\"GitHubDocFilePath\" OWNER TO \"postgres\";\n\n\nCREATE SEQUENCE IF NOT EXISTS \"public\".\"GitHubDocFilePath_id_seq\"\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\n\nALTER TABLE \"public\".\"GitHubDocFilePath_id_seq\" OWNER TO \"postgres\";\n\n\nALTER SEQUENCE \"public\".\"GitHubDocFilePath_id_seq\" OWNED BY \"public\".\"GitHubDocFilePath\".\"id\";\n\n\n\nCREATE TABLE IF NOT EXISTS \"public\".\"GitHubSchemaFilePath\" (\n    \"id\" integer NOT NULL,\n    \"path\" \"text\" NOT NULL,\n    \"projectId\" integer NOT NULL,\n    \"createdAt\" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL,\n    \"format\" \"public\".\"SchemaFormatEnum\" NOT NULL\n);\n\n\nALTER TABLE \"public\".\"GitHubSchemaFilePath\" OWNER TO \"postgres\";\n\n\nCREATE SEQUENCE IF NOT EXISTS \"public\".\"GitHubSchemaFilePath_id_seq\"\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\n\nALTER TABLE \"public\".\"GitHubSchemaFilePath_id_seq\" OWNER TO \"postgres\";\n\n\nALTER SEQUENCE \"public\".\"GitHubSchemaFilePath_id_seq\" OWNED BY \"public\".\"GitHubSchemaFilePath\".\"id\";\n\n\n\nCREATE TABLE IF NOT EXISTS \"public\".\"KnowledgeSuggestion\" (\n    \"id\" integer NOT NULL,\n    \"type\" \"public\".\"KnowledgeType\" NOT NULL,\n    \"title\" \"text\" NOT NULL,\n    \"path\" \"text\" NOT NULL,\n    \"content\" \"text\" NOT NULL,\n    \"fileSha\" \"text\",\n    \"projectId\" integer NOT NULL,\n    \"approvedAt\" timestamp(3) without time zone,\n    \"createdAt\" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL,\n    \"branchName\" \"text\" NOT NULL,\n    \"traceId\" \"text\",\n    \"reasoning\" \"text\" DEFAULT ''::\"text\"\n);\n\n\nALTER TABLE \"public\".\"KnowledgeSuggestion\" OWNER TO \"postgres\";\n\n\nCREATE TABLE IF NOT EXISTS \"public\".\"KnowledgeSuggestionDocMapping\" (\n    \"id\" integer NOT NULL,\n    \"knowledgeSuggestionId\" integer NOT NULL,\n    \"gitHubDocFilePathId\" integer NOT NULL,\n    \"createdAt\" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL\n);\n\n\nALTER TABLE \"public\".\"KnowledgeSuggestionDocMapping\" OWNER TO \"postgres\";\n\n\nCREATE SEQUENCE IF NOT EXISTS \"public\".\"KnowledgeSuggestionDocMapping_id_seq\"\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\n\nALTER TABLE \"public\".\"KnowledgeSuggestionDocMapping_id_seq\" OWNER TO \"postgres\";\n\n\nALTER SEQUENCE \"public\".\"KnowledgeSuggestionDocMapping_id_seq\" OWNED BY \"public\".\"KnowledgeSuggestionDocMapping\".\"id\";\n\n\n\nCREATE SEQUENCE IF NOT EXISTS \"public\".\"KnowledgeSuggestion_id_seq\"\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\n\nALTER TABLE \"public\".\"KnowledgeSuggestion_id_seq\" OWNER TO \"postgres\";\n\n\nALTER SEQUENCE \"public\".\"KnowledgeSuggestion_id_seq\" OWNED BY \"public\".\"KnowledgeSuggestion\".\"id\";\n\n\n\nCREATE TABLE IF NOT EXISTS \"public\".\"MembershipInvites\" (\n    \"id\" integer NOT NULL,\n    \"email\" \"text\" NOT NULL,\n    \"inviteByUserId\" \"uuid\" NOT NULL,\n    \"organizationId\" integer NOT NULL,\n    \"invitedAt\" timestamp with time zone DEFAULT CURRENT_TIMESTAMP\n);\n\n\nALTER TABLE \"public\".\"MembershipInvites\" OWNER TO \"postgres\";\n\n\nALTER TABLE \"public\".\"MembershipInvites\" ALTER COLUMN \"id\" ADD GENERATED ALWAYS AS IDENTITY (\n    SEQUENCE NAME \"public\".\"MembershipInvites_id_seq\"\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1\n);\n\n\n\nCREATE TABLE IF NOT EXISTS \"public\".\"Migration\" (\n    \"id\" integer NOT NULL,\n    \"title\" \"text\" NOT NULL,\n    \"pullRequestId\" integer NOT NULL,\n    \"createdAt\" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL\n);\n\n\nALTER TABLE \"public\".\"Migration\" OWNER TO \"postgres\";\n\n\nCREATE SEQUENCE IF NOT EXISTS \"public\".\"Migration_id_seq\"\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\n\nALTER TABLE \"public\".\"Migration_id_seq\" OWNER TO \"postgres\";\n\n\nALTER SEQUENCE \"public\".\"Migration_id_seq\" OWNED BY \"public\".\"Migration\".\"id\";\n\n\n\nCREATE TABLE IF NOT EXISTS \"public\".\"Organization\" (\n    \"id\" integer NOT NULL,\n    \"name\" \"text\" NOT NULL\n);\n\n\nALTER TABLE \"public\".\"Organization\" OWNER TO \"postgres\";\n\n\nCREATE TABLE IF NOT EXISTS \"public\".\"OrganizationMember\" (\n    \"id\" integer NOT NULL,\n    \"userId\" \"uuid\" NOT NULL,\n    \"organizationId\" integer NOT NULL,\n    \"joinedAt\" timestamp with time zone DEFAULT CURRENT_TIMESTAMP\n);\n\n\nALTER TABLE \"public\".\"OrganizationMember\" OWNER TO \"postgres\";\n\n\nALTER TABLE \"public\".\"OrganizationMember\" ALTER COLUMN \"id\" ADD GENERATED ALWAYS AS IDENTITY (\n    SEQUENCE NAME \"public\".\"OrganizationMember_id_seq\"\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1\n);\n\n\n\nALTER TABLE \"public\".\"Organization\" ALTER COLUMN \"id\" ADD GENERATED ALWAYS AS IDENTITY (\n    SEQUENCE NAME \"public\".\"Organization_id_seq\"\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1\n);\n\n\n\nCREATE TABLE IF NOT EXISTS \"public\".\"OverallReview\" (\n    \"id\" integer NOT NULL,\n    \"projectId\" integer,\n    \"pullRequestId\" integer NOT NULL,\n    \"reviewComment\" \"text\",\n    \"reviewedAt\" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,\n    \"createdAt\" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL,\n    \"branchName\" \"text\" NOT NULL,\n    \"traceId\" \"text\"\n);\n\n\nALTER TABLE \"public\".\"OverallReview\" OWNER TO \"postgres\";\n\n\nCREATE TABLE IF NOT EXISTS \"public\".\"OverallReviewKnowledgeSuggestionMapping\" (\n    \"id\" integer NOT NULL,\n    \"overallReviewId\" integer NOT NULL,\n    \"knowledgeSuggestionId\" integer NOT NULL,\n    \"createdAt\" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL\n);\n\n\nALTER TABLE \"public\".\"OverallReviewKnowledgeSuggestionMapping\" OWNER TO \"postgres\";\n\n\nCREATE SEQUENCE IF NOT EXISTS \"public\".\"OverallReviewKnowledgeSuggestionMapping_id_seq\"\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\n\nALTER TABLE \"public\".\"OverallReviewKnowledgeSuggestionMapping_id_seq\" OWNER TO \"postgres\";\n\n\nALTER SEQUENCE \"public\".\"OverallReviewKnowledgeSuggestionMapping_id_seq\" OWNED BY \"public\".\"OverallReviewKnowledgeSuggestionMapping\".\"id\";\n\n\n\nCREATE SEQUENCE IF NOT EXISTS \"public\".\"OverallReview_id_seq\"\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\n\nALTER TABLE \"public\".\"OverallReview_id_seq\" OWNER TO \"postgres\";\n\n\nALTER SEQUENCE \"public\".\"OverallReview_id_seq\" OWNED BY \"public\".\"OverallReview\".\"id\";\n\n\n\nCREATE TABLE IF NOT EXISTS \"public\".\"Project\" (\n    \"id\" integer NOT NULL,\n    \"name\" \"text\" NOT NULL,\n    \"createdAt\" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL,\n    \"organizationId\" integer\n);\n\n\nALTER TABLE \"public\".\"Project\" OWNER TO \"postgres\";\n\n\nCREATE TABLE IF NOT EXISTS \"public\".\"ProjectRepositoryMapping\" (\n    \"id\" integer NOT NULL,\n    \"projectId\" integer NOT NULL,\n    \"repositoryId\" integer NOT NULL,\n    \"createdAt\" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL\n);\n\n\nALTER TABLE \"public\".\"ProjectRepositoryMapping\" OWNER TO \"postgres\";\n\n\nCREATE SEQUENCE IF NOT EXISTS \"public\".\"ProjectRepositoryMapping_id_seq\"\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\n\nALTER TABLE \"public\".\"ProjectRepositoryMapping_id_seq\" OWNER TO \"postgres\";\n\n\nALTER SEQUENCE \"public\".\"ProjectRepositoryMapping_id_seq\" OWNED BY \"public\".\"ProjectRepositoryMapping\".\"id\";\n\n\n\nCREATE SEQUENCE IF NOT EXISTS \"public\".\"Project_id_seq\"\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\n\nALTER TABLE \"public\".\"Project_id_seq\" OWNER TO \"postgres\";\n\n\nALTER SEQUENCE \"public\".\"Project_id_seq\" OWNED BY \"public\".\"Project\".\"id\";\n\n\n\nCREATE TABLE IF NOT EXISTS \"public\".\"PullRequest\" (\n    \"id\" integer NOT NULL,\n    \"pullNumber\" bigint NOT NULL,\n    \"commentId\" bigint,\n    \"createdAt\" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL,\n    \"repositoryId\" integer NOT NULL\n);\n\n\nALTER TABLE \"public\".\"PullRequest\" OWNER TO \"postgres\";\n\n\nCREATE SEQUENCE IF NOT EXISTS \"public\".\"PullRequest_id_seq\"\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\n\nALTER TABLE \"public\".\"PullRequest_id_seq\" OWNER TO \"postgres\";\n\n\nALTER SEQUENCE \"public\".\"PullRequest_id_seq\" OWNED BY \"public\".\"PullRequest\".\"id\";\n\n\n\nCREATE TABLE IF NOT EXISTS \"public\".\"Repository\" (\n    \"id\" integer NOT NULL,\n    \"name\" \"text\" NOT NULL,\n    \"owner\" \"text\" NOT NULL,\n    \"installationId\" bigint NOT NULL,\n    \"isActive\" boolean DEFAULT true NOT NULL,\n    \"createdAt\" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL\n);\n\n\nALTER TABLE \"public\".\"Repository\" OWNER TO \"postgres\";\n\n\nCREATE SEQUENCE IF NOT EXISTS \"public\".\"Repository_id_seq\"\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\n\nALTER TABLE \"public\".\"Repository_id_seq\" OWNER TO \"postgres\";\n\n\nALTER SEQUENCE \"public\".\"Repository_id_seq\" OWNED BY \"public\".\"Repository\".\"id\";\n\n\n\nCREATE TABLE IF NOT EXISTS \"public\".\"ReviewFeedback\" (\n    \"id\" integer NOT NULL,\n    \"overallReviewId\" integer NOT NULL,\n    \"category\" \"public\".\"CategoryEnum\" NOT NULL,\n    \"severity\" \"public\".\"SeverityEnum\" NOT NULL,\n    \"description\" \"text\" NOT NULL,\n    \"createdAt\" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL,\n    \"suggestion\" \"text\" NOT NULL,\n    \"resolvedAt\" timestamp(3) without time zone,\n    \"resolutionComment\" \"text\"\n);\n\n\nALTER TABLE \"public\".\"ReviewFeedback\" OWNER TO \"postgres\";\n\n\nCREATE SEQUENCE IF NOT EXISTS \"public\".\"ReviewFeedback_id_seq\"\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\n\nALTER TABLE \"public\".\"ReviewFeedback_id_seq\" OWNER TO \"postgres\";\n\n\nALTER SEQUENCE \"public\".\"ReviewFeedback_id_seq\" OWNED BY \"public\".\"ReviewFeedback\".\"id\";\n\n\n\nCREATE SEQUENCE IF NOT EXISTS \"public\".\"ReviewSuggestionSnippet_id_seq\"\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\n\nALTER TABLE \"public\".\"ReviewSuggestionSnippet_id_seq\" OWNER TO \"postgres\";\n\n\nCREATE TABLE IF NOT EXISTS \"public\".\"ReviewSuggestionSnippet\" (\n    \"id\" integer DEFAULT \"nextval\"('\"public\".\"ReviewSuggestionSnippet_id_seq\"'::\"regclass\") NOT NULL,\n    \"reviewFeedbackId\" integer NOT NULL,\n    \"filename\" \"text\" NOT NULL,\n    \"snippet\" \"text\" NOT NULL,\n    \"createdAt\" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,\n    \"updatedAt\" timestamp(3) without time zone NOT NULL\n);\n\n\nALTER TABLE \"public\".\"ReviewSuggestionSnippet\" OWNER TO \"postgres\";\n\n\nCREATE TABLE IF NOT EXISTS \"public\".\"User\" (\n    \"id\" \"uuid\" NOT NULL,\n    \"name\" \"text\" NOT NULL,\n    \"email\" \"text\" NOT NULL\n);\n\n\nALTER TABLE \"public\".\"User\" OWNER TO \"postgres\";\n\n\nCREATE TABLE IF NOT EXISTS \"public\".\"_prisma_migrations\" (\n    \"id\" character varying(36) NOT NULL,\n    \"checksum\" character varying(64) NOT NULL,\n    \"finished_at\" timestamp with time zone,\n    \"migration_name\" character varying(255) NOT NULL,\n    \"logs\" \"text\",\n    \"rolled_back_at\" timestamp with time zone,\n    \"started_at\" timestamp with time zone DEFAULT \"now\"() NOT NULL,\n    \"applied_steps_count\" integer DEFAULT 0 NOT NULL\n);\n\n\nALTER TABLE \"public\".\"_prisma_migrations\" OWNER TO \"postgres\";\n\n\nALTER TABLE ONLY \"public\".\"GitHubDocFilePath\" ALTER COLUMN \"id\" SET DEFAULT \"nextval\"('\"public\".\"GitHubDocFilePath_id_seq\"'::\"regclass\");\n\n\n\nALTER TABLE ONLY \"public\".\"GitHubSchemaFilePath\" ALTER COLUMN \"id\" SET DEFAULT \"nextval\"('\"public\".\"GitHubSchemaFilePath_id_seq\"'::\"regclass\");\n\n\n\nALTER TABLE ONLY \"public\".\"KnowledgeSuggestion\" ALTER COLUMN \"id\" SET DEFAULT \"nextval\"('\"public\".\"KnowledgeSuggestion_id_seq\"'::\"regclass\");\n\n\n\nALTER TABLE ONLY \"public\".\"KnowledgeSuggestionDocMapping\" ALTER COLUMN \"id\" SET DEFAULT \"nextval\"('\"public\".\"KnowledgeSuggestionDocMapping_id_seq\"'::\"regclass\");\n\n\n\nALTER TABLE ONLY \"public\".\"Migration\" ALTER COLUMN \"id\" SET DEFAULT \"nextval\"('\"public\".\"Migration_id_seq\"'::\"regclass\");\n\n\n\nALTER TABLE ONLY \"public\".\"OverallReview\" ALTER COLUMN \"id\" SET DEFAULT \"nextval\"('\"public\".\"OverallReview_id_seq\"'::\"regclass\");\n\n\n\nALTER TABLE ONLY \"public\".\"OverallReviewKnowledgeSuggestionMapping\" ALTER COLUMN \"id\" SET DEFAULT \"nextval\"('\"public\".\"OverallReviewKnowledgeSuggestionMapping_id_seq\"'::\"regclass\");\n\n\n\nALTER TABLE ONLY \"public\".\"Project\" ALTER COLUMN \"id\" SET DEFAULT \"nextval\"('\"public\".\"Project_id_seq\"'::\"regclass\");\n\n\n\nALTER TABLE ONLY \"public\".\"ProjectRepositoryMapping\" ALTER COLUMN \"id\" SET DEFAULT \"nextval\"('\"public\".\"ProjectRepositoryMapping_id_seq\"'::\"regclass\");\n\n\n\nALTER TABLE ONLY \"public\".\"PullRequest\" ALTER COLUMN \"id\" SET DEFAULT \"nextval\"('\"public\".\"PullRequest_id_seq\"'::\"regclass\");\n\n\n\nALTER TABLE ONLY \"public\".\"Repository\" ALTER COLUMN \"id\" SET DEFAULT \"nextval\"('\"public\".\"Repository_id_seq\"'::\"regclass\");\n\n\n\nALTER TABLE ONLY \"public\".\"ReviewFeedback\" ALTER COLUMN \"id\" SET DEFAULT \"nextval\"('\"public\".\"ReviewFeedback_id_seq\"'::\"regclass\");\n\n\n\nALTER TABLE ONLY \"public\".\"GitHubDocFilePath\"\n    ADD CONSTRAINT \"GitHubDocFilePath_pkey\" PRIMARY KEY (\"id\");\n\n\n\nALTER TABLE ONLY \"public\".\"GitHubSchemaFilePath\"\n    ADD CONSTRAINT \"GitHubSchemaFilePath_path_projectId_key\" UNIQUE (\"path\", \"projectId\");\n\n\n\nALTER TABLE ONLY \"public\".\"GitHubSchemaFilePath\"\n    ADD CONSTRAINT \"GitHubSchemaFilePath_pkey\" PRIMARY KEY (\"id\");\n\n\n\nALTER TABLE ONLY \"public\".\"KnowledgeSuggestionDocMapping\"\n    ADD CONSTRAINT \"KnowledgeSuggestionDocMapping_pkey\" PRIMARY KEY (\"id\");\n\n\n\nALTER TABLE ONLY \"public\".\"KnowledgeSuggestion\"\n    ADD CONSTRAINT \"KnowledgeSuggestion_pkey\" PRIMARY KEY (\"id\");\n\n\n\nALTER TABLE ONLY \"public\".\"MembershipInvites\"\n    ADD CONSTRAINT \"MembershipInvites_pkey\" PRIMARY KEY (\"id\");\n\n\n\nALTER TABLE ONLY \"public\".\"Migration\"\n    ADD CONSTRAINT \"Migration_pkey\" PRIMARY KEY (\"id\");\n\n\n\nALTER TABLE ONLY \"public\".\"OrganizationMember\"\n    ADD CONSTRAINT \"OrganizationMember_pkey\" PRIMARY KEY (\"id\");\n\n\n\nALTER TABLE ONLY \"public\".\"OrganizationMember\"\n    ADD CONSTRAINT \"OrganizationMember_userId_organizationId_key\" UNIQUE (\"userId\", \"organizationId\");\n\n\n\nALTER TABLE ONLY \"public\".\"Organization\"\n    ADD CONSTRAINT \"Organization_pkey\" PRIMARY KEY (\"id\");\n\n\n\nALTER TABLE ONLY \"public\".\"OverallReviewKnowledgeSuggestionMapping\"\n    ADD CONSTRAINT \"OverallReviewKnowledgeSuggestionMapping_pkey\" PRIMARY KEY (\"id\");\n\n\n\nALTER TABLE ONLY \"public\".\"OverallReview\"\n    ADD CONSTRAINT \"OverallReview_pkey\" PRIMARY KEY (\"id\");\n\n\n\nALTER TABLE ONLY \"public\".\"ProjectRepositoryMapping\"\n    ADD CONSTRAINT \"ProjectRepositoryMapping_pkey\" PRIMARY KEY (\"id\");\n\n\n\nALTER TABLE ONLY \"public\".\"Project\"\n    ADD CONSTRAINT \"Project_pkey\" PRIMARY KEY (\"id\");\n\n\n\nALTER TABLE ONLY \"public\".\"PullRequest\"\n    ADD CONSTRAINT \"PullRequest_pkey\" PRIMARY KEY (\"id\");\n\n\n\nALTER TABLE ONLY \"public\".\"Repository\"\n    ADD CONSTRAINT \"Repository_pkey\" PRIMARY KEY (\"id\");\n\n\n\nALTER TABLE ONLY \"public\".\"ReviewFeedback\"\n    ADD CONSTRAINT \"ReviewFeedback_pkey\" PRIMARY KEY (\"id\");\n\n\n\nALTER TABLE ONLY \"public\".\"ReviewSuggestionSnippet\"\n    ADD CONSTRAINT \"ReviewSuggestionSnippet_pkey\" PRIMARY KEY (\"id\");\n\n\n\nALTER TABLE ONLY \"public\".\"User\"\n    ADD CONSTRAINT \"User_email_key\" UNIQUE (\"email\");\n\n\n\nALTER TABLE ONLY \"public\".\"User\"\n    ADD CONSTRAINT \"User_pkey\" PRIMARY KEY (\"id\");\n\n\n\nALTER TABLE ONLY \"public\".\"_prisma_migrations\"\n    ADD CONSTRAINT \"_prisma_migrations_pkey\" PRIMARY KEY (\"id\");\n\n\n\nCREATE UNIQUE INDEX \"GitHubDocFilePath_path_projectId_key\" ON \"public\".\"GitHubDocFilePath\" USING \"btree\" (\"path\", \"projectId\");\n\n\n\nCREATE UNIQUE INDEX \"KnowledgeSuggestionDocMapping_unique_mapping\" ON \"public\".\"KnowledgeSuggestionDocMapping\" USING \"btree\" (\"knowledgeSuggestionId\", \"gitHubDocFilePathId\");\n\n\n\nCREATE UNIQUE INDEX \"Migration_pullRequestId_key\" ON \"public\".\"Migration\" USING \"btree\" (\"pullRequestId\");\n\n\n\nCREATE UNIQUE INDEX \"OverallReviewKnowledgeSuggestionMapping_unique_mapping\" ON \"public\".\"OverallReviewKnowledgeSuggestionMapping\" USING \"btree\" (\"overallReviewId\", \"knowledgeSuggestionId\");\n\n\n\nCREATE UNIQUE INDEX \"ProjectRepositoryMapping_projectId_repositoryId_key\" ON \"public\".\"ProjectRepositoryMapping\" USING \"btree\" (\"projectId\", \"repositoryId\");\n\n\n\nCREATE UNIQUE INDEX \"PullRequest_repositoryId_pullNumber_key\" ON \"public\".\"PullRequest\" USING \"btree\" (\"repositoryId\", \"pullNumber\");\n\n\n\nCREATE UNIQUE INDEX \"Repository_owner_name_key\" ON \"public\".\"Repository\" USING \"btree\" (\"owner\", \"name\");\n\n\n\nCREATE INDEX \"idx_project_organizationId\" ON \"public\".\"Project\" USING \"btree\" (\"organizationId\");\n\n\n\nCREATE INDEX \"membership_invites_email_idx\" ON \"public\".\"MembershipInvites\" USING \"btree\" (\"email\");\n\n\n\nCREATE INDEX \"membership_invites_orgId_idx\" ON \"public\".\"MembershipInvites\" USING \"btree\" (\"organizationId\");\n\n\n\nCREATE INDEX \"organization_member_organizationId_idx\" ON \"public\".\"OrganizationMember\" USING \"btree\" (\"organizationId\");\n\n\n\nCREATE INDEX \"organization_member_userId_idx\" ON \"public\".\"OrganizationMember\" USING \"btree\" (\"userId\");\n\n\n\nALTER TABLE ONLY \"public\".\"GitHubDocFilePath\"\n    ADD CONSTRAINT \"GitHubDocFilePath_projectId_fkey\" FOREIGN KEY (\"projectId\") REFERENCES \"public\".\"Project\"(\"id\") ON UPDATE CASCADE ON DELETE RESTRICT;\n\n\n\nALTER TABLE ONLY \"public\".\"GitHubSchemaFilePath\"\n    ADD CONSTRAINT \"GitHubSchemaFilePath_projectId_fkey\" FOREIGN KEY (\"projectId\") REFERENCES \"public\".\"Project\"(\"id\") ON UPDATE CASCADE ON DELETE RESTRICT;\n\n\n\nALTER TABLE ONLY \"public\".\"KnowledgeSuggestionDocMapping\"\n    ADD CONSTRAINT \"KnowledgeSuggestionDocMapping_gitHubDocFilePathId_fkey\" FOREIGN KEY (\"gitHubDocFilePathId\") REFERENCES \"public\".\"GitHubDocFilePath\"(\"id\") ON UPDATE CASCADE ON DELETE CASCADE;\n\n\n\nALTER TABLE ONLY \"public\".\"KnowledgeSuggestionDocMapping\"\n    ADD CONSTRAINT \"KnowledgeSuggestionDocMapping_knowledgeSuggestionId_fkey\" FOREIGN KEY (\"knowledgeSuggestionId\") REFERENCES \"public\".\"KnowledgeSuggestion\"(\"id\") ON UPDATE CASCADE ON DELETE CASCADE;\n\n\n\nALTER TABLE ONLY \"public\".\"KnowledgeSuggestion\"\n    ADD CONSTRAINT \"KnowledgeSuggestion_projectId_fkey\" FOREIGN KEY (\"projectId\") REFERENCES \"public\".\"Project\"(\"id\") ON UPDATE CASCADE ON DELETE RESTRICT;\n\n\n\nALTER TABLE ONLY \"public\".\"MembershipInvites\"\n    ADD CONSTRAINT \"MembershipInvites_inviteByUserId_fkey\" FOREIGN KEY (\"inviteByUserId\") REFERENCES \"public\".\"User\"(\"id\") ON DELETE CASCADE;\n\n\n\nALTER TABLE ONLY \"public\".\"MembershipInvites\"\n    ADD CONSTRAINT \"MembershipInvites_organizationId_fkey\" FOREIGN KEY (\"organizationId\") REFERENCES \"public\".\"Organization\"(\"id\") ON DELETE CASCADE;\n\n\n\nALTER TABLE ONLY \"public\".\"Migration\"\n    ADD CONSTRAINT \"Migration_pullRequestId_fkey\" FOREIGN KEY (\"pullRequestId\") REFERENCES \"public\".\"PullRequest\"(\"id\") ON UPDATE CASCADE ON DELETE RESTRICT;\n\n\n\nALTER TABLE ONLY \"public\".\"OrganizationMember\"\n    ADD CONSTRAINT \"OrganizationMember_organizationId_fkey\" FOREIGN KEY (\"organizationId\") REFERENCES \"public\".\"Organization\"(\"id\") ON DELETE CASCADE;\n\n\n\nALTER TABLE ONLY \"public\".\"OrganizationMember\"\n    ADD CONSTRAINT \"OrganizationMember_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"public\".\"User\"(\"id\") ON DELETE CASCADE;\n\n\n\nALTER TABLE ONLY \"public\".\"OverallReviewKnowledgeSuggestionMapping\"\n    ADD CONSTRAINT \"OverallReviewKnowledgeSuggestionMapping_knowledgeSuggestionId_f\" FOREIGN KEY (\"knowledgeSuggestionId\") REFERENCES \"public\".\"KnowledgeSuggestion\"(\"id\") ON UPDATE CASCADE ON DELETE CASCADE;\n\n\n\nALTER TABLE ONLY \"public\".\"OverallReviewKnowledgeSuggestionMapping\"\n    ADD CONSTRAINT \"OverallReviewKnowledgeSuggestionMapping_overallReviewId_fkey\" FOREIGN KEY (\"overallReviewId\") REFERENCES \"public\".\"OverallReview\"(\"id\") ON UPDATE CASCADE ON DELETE CASCADE;\n\n\n\nALTER TABLE ONLY \"public\".\"OverallReview\"\n    ADD CONSTRAINT \"OverallReview_projectId_fkey\" FOREIGN KEY (\"projectId\") REFERENCES \"public\".\"Project\"(\"id\") ON UPDATE CASCADE ON DELETE SET NULL;\n\n\n\nALTER TABLE ONLY \"public\".\"OverallReview\"\n    ADD CONSTRAINT \"OverallReview_pullRequestId_fkey\" FOREIGN KEY (\"pullRequestId\") REFERENCES \"public\".\"PullRequest\"(\"id\") ON UPDATE CASCADE ON DELETE RESTRICT;\n\n\n\nALTER TABLE ONLY \"public\".\"ProjectRepositoryMapping\"\n    ADD CONSTRAINT \"ProjectRepositoryMapping_projectId_fkey\" FOREIGN KEY (\"projectId\") REFERENCES \"public\".\"Project\"(\"id\") ON UPDATE CASCADE ON DELETE RESTRICT;\n\n\n\nALTER TABLE ONLY \"public\".\"ProjectRepositoryMapping\"\n    ADD CONSTRAINT \"ProjectRepositoryMapping_repositoryId_fkey\" FOREIGN KEY (\"repositoryId\") REFERENCES \"public\".\"Repository\"(\"id\") ON UPDATE CASCADE ON DELETE RESTRICT;\n\n\n\nALTER TABLE ONLY \"public\".\"Project\"\n    ADD CONSTRAINT \"Project_organizationId_fkey\" FOREIGN KEY (\"organizationId\") REFERENCES \"public\".\"Organization\"(\"id\") ON UPDATE CASCADE ON DELETE CASCADE;\n\n\n\nALTER TABLE ONLY \"public\".\"PullRequest\"\n    ADD CONSTRAINT \"PullRequest_repositoryId_fkey\" FOREIGN KEY (\"repositoryId\") REFERENCES \"public\".\"Repository\"(\"id\") ON UPDATE CASCADE ON DELETE RESTRICT;\n\n\n\nALTER TABLE ONLY \"public\".\"ReviewFeedback\"\n    ADD CONSTRAINT \"ReviewFeedback_overallReviewId_fkey\" FOREIGN KEY (\"overallReviewId\") REFERENCES \"public\".\"OverallReview\"(\"id\") ON UPDATE CASCADE ON DELETE RESTRICT;\n\n\n\nALTER TABLE ONLY \"public\".\"ReviewSuggestionSnippet\"\n    ADD CONSTRAINT \"ReviewSuggestionSnippet_reviewFeedbackId_fkey\" FOREIGN KEY (\"reviewFeedbackId\") REFERENCES \"public\".\"ReviewFeedback\"(\"id\") ON UPDATE CASCADE ON DELETE CASCADE;\n\n\n\n\n\nALTER PUBLICATION \"supabase_realtime\" OWNER TO \"postgres\";\n\n\n\n\n\nGRANT USAGE ON SCHEMA \"public\" TO \"postgres\";\nGRANT USAGE ON SCHEMA \"public\" TO \"anon\";\nGRANT USAGE ON SCHEMA \"public\" TO \"authenticated\";\nGRANT USAGE ON SCHEMA \"public\" TO \"service_role\";\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGRANT ALL ON FUNCTION \"public\".\"handle_new_user\"() TO \"anon\";\nGRANT ALL ON FUNCTION \"public\".\"handle_new_user\"() TO \"authenticated\";\nGRANT ALL ON FUNCTION \"public\".\"handle_new_user\"() TO \"service_role\";\n\n\n\nGRANT ALL ON FUNCTION \"public\".\"sync_existing_users\"() TO \"anon\";\nGRANT ALL ON FUNCTION \"public\".\"sync_existing_users\"() TO \"authenticated\";\nGRANT ALL ON FUNCTION \"public\".\"sync_existing_users\"() TO \"service_role\";\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGRANT ALL ON TABLE \"public\".\"GitHubDocFilePath\" TO \"anon\";\nGRANT ALL ON TABLE \"public\".\"GitHubDocFilePath\" TO \"authenticated\";\nGRANT ALL ON TABLE \"public\".\"GitHubDocFilePath\" TO \"service_role\";\n\n\n\nGRANT ALL ON SEQUENCE \"public\".\"GitHubDocFilePath_id_seq\" TO \"anon\";\nGRANT ALL ON SEQUENCE \"public\".\"GitHubDocFilePath_id_seq\" TO \"authenticated\";\nGRANT ALL ON SEQUENCE \"public\".\"GitHubDocFilePath_id_seq\" TO \"service_role\";\n\n\n\nGRANT ALL ON TABLE \"public\".\"GitHubSchemaFilePath\" TO \"anon\";\nGRANT ALL ON TABLE \"public\".\"GitHubSchemaFilePath\" TO \"authenticated\";\nGRANT ALL ON TABLE \"public\".\"GitHubSchemaFilePath\" TO \"service_role\";\n\n\n\nGRANT ALL ON SEQUENCE \"public\".\"GitHubSchemaFilePath_id_seq\" TO \"anon\";\nGRANT ALL ON SEQUENCE \"public\".\"GitHubSchemaFilePath_id_seq\" TO \"authenticated\";\nGRANT ALL ON SEQUENCE \"public\".\"GitHubSchemaFilePath_id_seq\" TO \"service_role\";\n\n\n\nGRANT ALL ON TABLE \"public\".\"KnowledgeSuggestion\" TO \"anon\";\nGRANT ALL ON TABLE \"public\".\"KnowledgeSuggestion\" TO \"authenticated\";\nGRANT ALL ON TABLE \"public\".\"KnowledgeSuggestion\" TO \"service_role\";\n\n\n\nGRANT ALL ON TABLE \"public\".\"KnowledgeSuggestionDocMapping\" TO \"anon\";\nGRANT ALL ON TABLE \"public\".\"KnowledgeSuggestionDocMapping\" TO \"authenticated\";\nGRANT ALL ON TABLE \"public\".\"KnowledgeSuggestionDocMapping\" TO \"service_role\";\n\n\n\nGRANT ALL ON SEQUENCE \"public\".\"KnowledgeSuggestionDocMapping_id_seq\" TO \"anon\";\nGRANT ALL ON SEQUENCE \"public\".\"KnowledgeSuggestionDocMapping_id_seq\" TO \"authenticated\";\nGRANT ALL ON SEQUENCE \"public\".\"KnowledgeSuggestionDocMapping_id_seq\" TO \"service_role\";\n\n\n\nGRANT ALL ON SEQUENCE \"public\".\"KnowledgeSuggestion_id_seq\" TO \"anon\";\nGRANT ALL ON SEQUENCE \"public\".\"KnowledgeSuggestion_id_seq\" TO \"authenticated\";\nGRANT ALL ON SEQUENCE \"public\".\"KnowledgeSuggestion_id_seq\" TO \"service_role\";\n\n\n\nGRANT ALL ON TABLE \"public\".\"MembershipInvites\" TO \"anon\";\nGRANT ALL ON TABLE \"public\".\"MembershipInvites\" TO \"authenticated\";\nGRANT ALL ON TABLE \"public\".\"MembershipInvites\" TO \"service_role\";\n\n\n\nGRANT ALL ON SEQUENCE \"public\".\"MembershipInvites_id_seq\" TO \"anon\";\nGRANT ALL ON SEQUENCE \"public\".\"MembershipInvites_id_seq\" TO \"authenticated\";\nGRANT ALL ON SEQUENCE \"public\".\"MembershipInvites_id_seq\" TO \"service_role\";\n\n\n\nGRANT ALL ON TABLE \"public\".\"Migration\" TO \"anon\";\nGRANT ALL ON TABLE \"public\".\"Migration\" TO \"authenticated\";\nGRANT ALL ON TABLE \"public\".\"Migration\" TO \"service_role\";\n\n\n\nGRANT ALL ON SEQUENCE \"public\".\"Migration_id_seq\" TO \"anon\";\nGRANT ALL ON SEQUENCE \"public\".\"Migration_id_seq\" TO \"authenticated\";\nGRANT ALL ON SEQUENCE \"public\".\"Migration_id_seq\" TO \"service_role\";\n\n\n\nGRANT ALL ON TABLE \"public\".\"Organization\" TO \"anon\";\nGRANT ALL ON TABLE \"public\".\"Organization\" TO \"authenticated\";\nGRANT ALL ON TABLE \"public\".\"Organization\" TO \"service_role\";\n\n\n\nGRANT ALL ON TABLE \"public\".\"OrganizationMember\" TO \"anon\";\nGRANT ALL ON TABLE \"public\".\"OrganizationMember\" TO \"authenticated\";\nGRANT ALL ON TABLE \"public\".\"OrganizationMember\" TO \"service_role\";\n\n\n\nGRANT ALL ON SEQUENCE \"public\".\"OrganizationMember_id_seq\" TO \"anon\";\nGRANT ALL ON SEQUENCE \"public\".\"OrganizationMember_id_seq\" TO \"authenticated\";\nGRANT ALL ON SEQUENCE \"public\".\"OrganizationMember_id_seq\" TO \"service_role\";\n\n\n\nGRANT ALL ON SEQUENCE \"public\".\"Organization_id_seq\" TO \"anon\";\nGRANT ALL ON SEQUENCE \"public\".\"Organization_id_seq\" TO \"authenticated\";\nGRANT ALL ON SEQUENCE \"public\".\"Organization_id_seq\" TO \"service_role\";\n\n\n\nGRANT ALL ON TABLE \"public\".\"OverallReview\" TO \"anon\";\nGRANT ALL ON TABLE \"public\".\"OverallReview\" TO \"authenticated\";\nGRANT ALL ON TABLE \"public\".\"OverallReview\" TO \"service_role\";\n\n\n\nGRANT ALL ON TABLE \"public\".\"OverallReviewKnowledgeSuggestionMapping\" TO \"anon\";\nGRANT ALL ON TABLE \"public\".\"OverallReviewKnowledgeSuggestionMapping\" TO \"authenticated\";\nGRANT ALL ON TABLE \"public\".\"OverallReviewKnowledgeSuggestionMapping\" TO \"service_role\";\n\n\n\nGRANT ALL ON SEQUENCE \"public\".\"OverallReviewKnowledgeSuggestionMapping_id_seq\" TO \"anon\";\nGRANT ALL ON SEQUENCE \"public\".\"OverallReviewKnowledgeSuggestionMapping_id_seq\" TO \"authenticated\";\nGRANT ALL ON SEQUENCE \"public\".\"OverallReviewKnowledgeSuggestionMapping_id_seq\" TO \"service_role\";\n\n\n\nGRANT ALL ON SEQUENCE \"public\".\"OverallReview_id_seq\" TO \"anon\";\nGRANT ALL ON SEQUENCE \"public\".\"OverallReview_id_seq\" TO \"authenticated\";\nGRANT ALL ON SEQUENCE \"public\".\"OverallReview_id_seq\" TO \"service_role\";\n\n\n\nGRANT ALL ON TABLE \"public\".\"Project\" TO \"anon\";\nGRANT ALL ON TABLE \"public\".\"Project\" TO \"authenticated\";\nGRANT ALL ON TABLE \"public\".\"Project\" TO \"service_role\";\n\n\n\nGRANT ALL ON TABLE \"public\".\"ProjectRepositoryMapping\" TO \"anon\";\nGRANT ALL ON TABLE \"public\".\"ProjectRepositoryMapping\" TO \"authenticated\";\nGRANT ALL ON TABLE \"public\".\"ProjectRepositoryMapping\" TO \"service_role\";\n\n\n\nGRANT ALL ON SEQUENCE \"public\".\"ProjectRepositoryMapping_id_seq\" TO \"anon\";\nGRANT ALL ON SEQUENCE \"public\".\"ProjectRepositoryMapping_id_seq\" TO \"authenticated\";\nGRANT ALL ON SEQUENCE \"public\".\"ProjectRepositoryMapping_id_seq\" TO \"service_role\";\n\n\n\nGRANT ALL ON SEQUENCE \"public\".\"Project_id_seq\" TO \"anon\";\nGRANT ALL ON SEQUENCE \"public\".\"Project_id_seq\" TO \"authenticated\";\nGRANT ALL ON SEQUENCE \"public\".\"Project_id_seq\" TO \"service_role\";\n\n\n\nGRANT ALL ON TABLE \"public\".\"PullRequest\" TO \"anon\";\nGRANT ALL ON TABLE \"public\".\"PullRequest\" TO \"authenticated\";\nGRANT ALL ON TABLE \"public\".\"PullRequest\" TO \"service_role\";\n\n\n\nGRANT ALL ON SEQUENCE \"public\".\"PullRequest_id_seq\" TO \"anon\";\nGRANT ALL ON SEQUENCE \"public\".\"PullRequest_id_seq\" TO \"authenticated\";\nGRANT ALL ON SEQUENCE \"public\".\"PullRequest_id_seq\" TO \"service_role\";\n\n\n\nGRANT ALL ON TABLE \"public\".\"Repository\" TO \"anon\";\nGRANT ALL ON TABLE \"public\".\"Repository\" TO \"authenticated\";\nGRANT ALL ON TABLE \"public\".\"Repository\" TO \"service_role\";\n\n\n\nGRANT ALL ON SEQUENCE \"public\".\"Repository_id_seq\" TO \"anon\";\nGRANT ALL ON SEQUENCE \"public\".\"Repository_id_seq\" TO \"authenticated\";\nGRANT ALL ON SEQUENCE \"public\".\"Repository_id_seq\" TO \"service_role\";\n\n\n\nGRANT ALL ON TABLE \"public\".\"ReviewFeedback\" TO \"anon\";\nGRANT ALL ON TABLE \"public\".\"ReviewFeedback\" TO \"authenticated\";\nGRANT ALL ON TABLE \"public\".\"ReviewFeedback\" TO \"service_role\";\n\n\n\nGRANT ALL ON SEQUENCE \"public\".\"ReviewFeedback_id_seq\" TO \"anon\";\nGRANT ALL ON SEQUENCE \"public\".\"ReviewFeedback_id_seq\" TO \"authenticated\";\nGRANT ALL ON SEQUENCE \"public\".\"ReviewFeedback_id_seq\" TO \"service_role\";\n\n\n\nGRANT ALL ON SEQUENCE \"public\".\"ReviewSuggestionSnippet_id_seq\" TO \"anon\";\nGRANT ALL ON SEQUENCE \"public\".\"ReviewSuggestionSnippet_id_seq\" TO \"authenticated\";\nGRANT ALL ON SEQUENCE \"public\".\"ReviewSuggestionSnippet_id_seq\" TO \"service_role\";\n\n\n\nGRANT ALL ON TABLE \"public\".\"ReviewSuggestionSnippet\" TO \"anon\";\nGRANT ALL ON TABLE \"public\".\"ReviewSuggestionSnippet\" TO \"authenticated\";\nGRANT ALL ON TABLE \"public\".\"ReviewSuggestionSnippet\" TO \"service_role\";\n\n\n\nGRANT ALL ON TABLE \"public\".\"User\" TO \"anon\";\nGRANT ALL ON TABLE \"public\".\"User\" TO \"authenticated\";\nGRANT ALL ON TABLE \"public\".\"User\" TO \"service_role\";\n\n\n\n\n\n\n\n\n\nALTER DEFAULT PRIVILEGES FOR ROLE \"postgres\" IN SCHEMA \"public\" GRANT ALL ON SEQUENCES  TO \"postgres\";\nALTER DEFAULT PRIVILEGES FOR ROLE \"postgres\" IN SCHEMA \"public\" GRANT ALL ON SEQUENCES  TO \"anon\";\nALTER DEFAULT PRIVILEGES FOR ROLE \"postgres\" IN SCHEMA \"public\" GRANT ALL ON SEQUENCES  TO \"authenticated\";\nALTER DEFAULT PRIVILEGES FOR ROLE \"postgres\" IN SCHEMA \"public\" GRANT ALL ON SEQUENCES  TO \"service_role\";\n\n\n\n\n\n\nALTER DEFAULT PRIVILEGES FOR ROLE \"postgres\" IN SCHEMA \"public\" GRANT ALL ON FUNCTIONS  TO \"postgres\";\nALTER DEFAULT PRIVILEGES FOR ROLE \"postgres\" IN SCHEMA \"public\" GRANT ALL ON FUNCTIONS  TO \"anon\";\nALTER DEFAULT PRIVILEGES FOR ROLE \"postgres\" IN SCHEMA \"public\" GRANT ALL ON FUNCTIONS  TO \"authenticated\";\nALTER DEFAULT PRIVILEGES FOR ROLE \"postgres\" IN SCHEMA \"public\" GRANT ALL ON FUNCTIONS  TO \"service_role\";\n\n\n\n\n\n\nALTER DEFAULT PRIVILEGES FOR ROLE \"postgres\" IN SCHEMA \"public\" GRANT ALL ON TABLES  TO \"postgres\";\nALTER DEFAULT PRIVILEGES FOR ROLE \"postgres\" IN SCHEMA \"public\" GRANT ALL ON TABLES  TO \"anon\";\nALTER DEFAULT PRIVILEGES FOR ROLE \"postgres\" IN SCHEMA \"public\" GRANT ALL ON TABLES  TO \"authenticated\";\nALTER DEFAULT PRIVILEGES FOR ROLE \"postgres\" IN SCHEMA \"public\" GRANT ALL ON TABLES  TO \"service_role\";\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRESET ALL;\n"
    },
    "fileChanges": [
        {
            "filename": "frontend/apps/app/features/migrations/actions/resolveReviewFeedback.ts",
            "status": "added",
            "changes": 45,
            "patch": "@@ -0,0 +1,45 @@\n+'use server'\n+\n+import { createClient } from '@/libs/db/server'\n+import * as v from 'valibot'\n+\n+const requestSchema = v.object({\n+  feedbackId: v.pipe(v.number()),\n+  resolutionComment: v.optional(v.nullable(v.string())),\n+})\n+\n+export const resolveReviewFeedback = async (data: {\n+  feedbackId: number\n+  resolutionComment?: string | null\n+}) => {\n+  const parsedData = v.safeParse(requestSchema, data)\n+\n+  if (!parsedData.success) {\n+    throw new Error(`Invalid data: ${JSON.stringify(parsedData.issues)}`)\n+  }\n+\n+  const { feedbackId, resolutionComment } = parsedData.output\n+\n+  try {\n+    const supabase = await createClient()\n+\n+    const { data: updatedFeedback, error } = await supabase\n+      .from('ReviewFeedback')\n+      .update({\n+        resolvedAt: new Date().toISOString(),\n+        resolutionComment: resolutionComment || null,\n+        updatedAt: new Date().toISOString(),\n+      })\n+      .eq('id', feedbackId)\n+      .select()\n+\n+    if (error) {\n+      throw new Error(`Failed to resolve feedback: ${error.message}`)\n+    }\n+\n+    return { success: true, data: updatedFeedback }\n+  } catch (error) {\n+    console.error('Error resolving review feedback:', error)\n+    throw error\n+  }\n+}"
        },
        {
            "filename": "frontend/apps/app/features/migrations/actions/resolveReviewIssue.ts",
            "status": "modified",
            "changes": 4,
            "patch": "@@ -8,7 +8,7 @@ const requestSchema = v.object({\n   resolutionComment: v.optional(v.nullable(v.string())),\n })\n \n-export const resolveReviewIssue = async (data: {\n+export const resolveReviewFeedback = async (data: {\n   issueId: number\n   resolutionComment?: string | null\n }) => {\n@@ -24,7 +24,7 @@ export const resolveReviewIssue = async (data: {\n     const supabase = await createClient()\n \n     const { data: updatedIssue, error } = await supabase\n-      .from('ReviewIssue')\n+      .from('ReviewFeedback')\n       .update({\n         resolvedAt: new Date().toISOString(),\n         resolutionComment: resolutionComment || null,"
        },
        {
            "filename": "frontend/apps/app/features/migrations/components/MigrationHealthClient/MigrationHealthClient.tsx",
            "status": "modified",
            "changes": 12,
            "patch": "@@ -1,6 +1,6 @@\n 'use client'\n \n-import { useReviewIssues } from '../../contexts/ReviewIssuesContext'\n+import { useReviewFeedbacks } from '../../contexts/ReviewFeedbackContext'\n import { calculateScoresFromIssues } from '../../utils/calculateScores'\n import { RadarChart } from '../RadarChart/RadarChart'\n import styles from './MigrationHealthClient.module.css'\n@@ -13,19 +13,19 @@ export const MigrationHealthClient = ({\n   className,\n }: MigrationHealthClientProps) => {\n   // Use the shared context instead of local state\n-  const { issues } = useReviewIssues()\n+  const { feedbacks } = useReviewFeedbacks()\n \n-  // Calculate scores from issues\n-  const scores = calculateScoresFromIssues(issues)\n+  // Calculate scores from feedbacks\n+  const scores = calculateScoresFromIssues(feedbacks)\n \n   return (\n     <div className={className}>\n-      {issues && issues.length > 0 ? (\n+      {feedbacks && feedbacks.length > 0 ? (\n         <div className={styles.radarChartContainer}>\n           <RadarChart scores={scores} />\n         </div>\n       ) : (\n-        <p className={styles.noScores}>No review issues found.</p>\n+        <p className={styles.noScores}>No review feedbacks found.</p>\n       )}\n     </div>\n   )"
        },
        {
            "filename": "frontend/apps/app/features/migrations/components/ResolveButton/ResolveButton.tsx",
            "status": "modified",
            "changes": 10,
            "patch": "@@ -3,7 +3,7 @@\n import { Button } from '@liam-hq/ui'\n import type React from 'react'\n import { useState } from 'react'\n-import { resolveReviewIssue } from '../../actions/resolveReviewIssue'\n+import { resolveReviewFeedback } from '../../actions/resolveReviewFeedback'\n import { ResolutionCommentModal } from '../ResolutionCommentModal/ResolutionCommentModal'\n import styles from './ResolveButton.module.css'\n \n@@ -38,8 +38,8 @@ export const ResolveButton: React.FC<ResolveButtonProps> = ({\n       setError(null)\n \n       try {\n-        await resolveReviewIssue({\n-          issueId,\n+        await resolveReviewFeedback({\n+          feedbackId: issueId,\n           resolutionComment: comment,\n         })\n \n@@ -49,11 +49,11 @@ export const ResolveButton: React.FC<ResolveButtonProps> = ({\n         if (error instanceof Error) {\n           throw error\n         }\n-        throw new Error('Failed to resolve issue')\n+        throw new Error('Failed to resolve feedback')\n       }\n     } catch (err) {\n       setError(err instanceof Error ? err.message : 'An error occurred')\n-      console.error('Error resolving issue:', err)\n+      console.error('Error resolving feedback:', err)\n     } finally {\n       setIsLoading(false)\n     }"
        },
        {
            "filename": "frontend/apps/app/features/migrations/components/ReviewFeedbackList/ReviewFeedbackList.module.css",
            "status": "renamed",
            "changes": 22,
            "patch": "@@ -1,11 +1,11 @@\n-.reviewIssues {\n+.reviewFeedbacks {\n   display: flex;\n   flex-direction: column;\n   gap: var(--spacing-3, 12px);\n   margin-top: var(--spacing-4, 16px);\n }\n \n-.reviewIssue {\n+.reviewFeedback {\n   padding: var(--spacing-3, 12px);\n   border-radius: var(--border-radius-md, 6px);\n   border-left: 4px solid;\n@@ -37,43 +37,43 @@\n   opacity: 0.7;\n }\n \n-.issueHeader {\n+.feedbackHeader {\n   display: flex;\n   justify-content: space-between;\n   margin-bottom: var(--spacing-2, 8px);\n   font-weight: 600;\n }\n \n-.issueCategory {\n+.feedbackCategory {\n   font-size: var(--font-size-3, 0.75rem);\n   color: var(--global-foreground, #fff);\n   text-transform: uppercase;\n }\n \n-.issueActions {\n+.feedbackActions {\n   display: flex;\n   align-items: center;\n   gap: var(--spacing-2, 8px);\n }\n \n-.issueSeverity {\n+.feedbackSeverity {\n   font-size: var(--font-size-3, 0.75rem);\n   color: var(--global-foreground, #fff);\n }\n \n-.issueCopyButton {\n+.feedbackCopyButton {\n   font-size: var(--font-size-2, 0.6875rem);\n   padding: 0.125rem 0.375rem;\n }\n \n-.issueDescription {\n+.feedbackDescription {\n   font-size: var(--font-size-4, 0.8125rem);\n   line-height: 1.5;\n   color: var(--global-foreground, #fff);\n   margin-bottom: var(--spacing-2, 8px);\n }\n \n-.issueSuggestion {\n+.feedbackSuggestion {\n   margin-top: var(--spacing-2, 8px);\n   padding-top: var(--spacing-2, 8px);\n   border-top: 1px solid var(--overlay-10, rgba(255, 255, 255, 0.1));\n@@ -86,13 +86,13 @@\n   margin-bottom: var(--spacing-1, 4px);\n }\n \n-.issueSuggestion p {\n+.feedbackSuggestion p {\n   font-size: var(--font-size-4, 0.8125rem);\n   line-height: 1.5;\n   color: var(--global-foreground, #fff);\n }\n \n-.noIssues {\n+.noFeedbacks {\n   font-style: italic;\n   color: var(--global-mute-text, #bebfc1);\n   font-size: var(--font-size-4, 0.8125rem);"
        },
        {
            "filename": "frontend/apps/app/features/migrations/components/ReviewFeedbackList/ReviewFeedbackList.tsx",
            "status": "renamed",
            "changes": 96,
            "patch": "@@ -3,41 +3,41 @@\n import { clsx } from 'clsx'\n import type React from 'react'\n import { CopyButton } from '../../../../components/CopyButton/CopyButton'\n-import { resolveReviewIssue } from '../../actions/resolveReviewIssue'\n-import { useReviewIssues } from '../../contexts/ReviewIssuesContext'\n-import { formatReviewIssue } from '../../utils/formatReviewIssue'\n+import { resolveReviewFeedback } from '../../actions/resolveReviewFeedback'\n+import { useReviewFeedbacks } from '../../contexts/ReviewFeedbackContext'\n+import { formatReviewFeedback } from '../../utils/formatReviewFeedback'\n import { ResolveButton } from '../ResolveButton/ResolveButton'\n-import styles from './ReviewIssuesList.module.css'\n+import styles from './ReviewFeedbackList.module.css'\n \n-interface ReviewIssuesListProps {\n+interface ReviewFeedbackListProps {\n   containerClassName?: string\n }\n \n-export const ReviewIssuesList: React.FC<ReviewIssuesListProps> = ({\n+export const ReviewFeedbackList: React.FC<ReviewFeedbackListProps> = ({\n   containerClassName,\n }) => {\n   // Use the shared context instead of local state\n-  const { issues, updateIssue } = useReviewIssues()\n+  const { feedbacks, updateFeedback } = useReviewFeedbacks()\n \n-  const handleResolve = async (issueId: number, comment: string) => {\n+  const handleResolve = async (feedbackId: number, comment: string) => {\n     try {\n       // Call the server action to update the database\n-      await resolveReviewIssue({\n-        issueId,\n+      await resolveReviewFeedback({\n+        feedbackId,\n         resolutionComment: comment,\n       })\n \n-      // Update the issue in the shared context for immediate UI update\n-      updateIssue(issueId, {\n+      // Update the feedback in the shared context for immediate UI update\n+      updateFeedback(feedbackId, {\n         resolvedAt: new Date().toISOString(),\n         resolutionComment: comment,\n       })\n     } catch (err) {\n-      console.error('Error resolving issue:', err)\n+      console.error('Error resolving feedback:', err)\n     }\n   }\n \n-  const sortedIssues = [...issues].sort((a, b) => {\n+  const sortedFeedbacks = [...feedbacks].sort((a, b) => {\n     // First sort by resolved status (unresolved first)\n     if (a.resolvedAt && !b.resolvedAt) return 1\n     if (!a.resolvedAt && b.resolvedAt) return -1\n@@ -55,53 +55,57 @@ export const ReviewIssuesList: React.FC<ReviewIssuesListProps> = ({\n   })\n \n   return (\n-    <div className={clsx(styles.reviewIssues, containerClassName)}>\n-      {sortedIssues.length > 0 ? (\n-        sortedIssues.map((issue) => (\n+    <div className={clsx(styles.reviewFeedbacks, containerClassName)}>\n+      {sortedFeedbacks.length > 0 ? (\n+        sortedFeedbacks.map((feedback) => (\n           <div\n-            key={issue.id}\n+            key={feedback.id}\n             className={clsx(\n-              styles.reviewIssue,\n-              styles[`severity${issue.severity}`],\n-              issue.resolvedAt && styles.resolved,\n+              styles.reviewFeedback,\n+              styles[`severity${feedback.severity}`],\n+              feedback.resolvedAt && styles.resolved,\n             )}\n           >\n-            <div className={styles.issueHeader}>\n-              <span className={styles.issueCategory}>{issue.category}</span>\n-              <div className={styles.issueActions}>\n-                <span className={styles.issueSeverity}>{issue.severity}</span>\n+            <div className={styles.feedbackHeader}>\n+              <span className={styles.feedbackCategory}>\n+                {feedback.category}\n+              </span>\n+              <div className={styles.feedbackActions}>\n+                <span className={styles.feedbackSeverity}>\n+                  {feedback.severity}\n+                </span>\n                 <CopyButton\n-                  text={formatReviewIssue({\n-                    category: issue.category,\n-                    severity: issue.severity,\n-                    description: issue.description || '',\n-                    suggestion: issue.suggestion || '',\n+                  text={formatReviewFeedback({\n+                    category: feedback.category,\n+                    severity: feedback.severity,\n+                    description: feedback.description || '',\n+                    suggestion: feedback.suggestion || '',\n                     snippets:\n-                      issue.suggestionSnippets?.map(\n+                      feedback.suggestionSnippets?.map(\n                         (snippet: { filename: string; snippet: string }) => ({\n                           filename: snippet.filename,\n                           snippet: snippet.snippet,\n                         }),\n                       ) || [],\n                   })}\n-                  className={styles.issueCopyButton}\n+                  className={styles.feedbackCopyButton}\n                 />\n                 <ResolveButton\n-                  issueId={issue.id}\n-                  isResolved={!!issue.resolvedAt}\n-                  resolutionComment={issue.resolutionComment}\n-                  onResolve={(comment) => handleResolve(issue.id, comment)}\n+                  issueId={feedback.id}\n+                  isResolved={!!feedback.resolvedAt}\n+                  resolutionComment={feedback.resolutionComment}\n+                  onResolve={(comment) => handleResolve(feedback.id, comment)}\n                 />\n               </div>\n             </div>\n-            <p className={styles.issueDescription}>{issue.description}</p>\n-            {issue.suggestion && (\n-              <div className={styles.issueSuggestion}>\n+            <p className={styles.feedbackDescription}>{feedback.description}</p>\n+            {feedback.suggestion && (\n+              <div className={styles.feedbackSuggestion}>\n                 <h4 className={styles.suggestionTitle}>💡 Suggestion:</h4>\n-                <p>{issue.suggestion}</p>\n+                <p>{feedback.suggestion}</p>\n               </div>\n             )}\n-            {issue.suggestionSnippets?.map(\n+            {feedback.suggestionSnippets?.map(\n               (snippet: { filename: string; snippet: string; id: number }) => (\n                 <div key={snippet.filename} className={styles.snippetContainer}>\n                   <div className={styles.snippetHeader}>\n@@ -114,24 +118,24 @@ export const ReviewIssuesList: React.FC<ReviewIssuesListProps> = ({\n                 </div>\n               ),\n             )}\n-            {issue.resolvedAt && (\n+            {feedback.resolvedAt && (\n               <div className={styles.resolvedInfo}>\n                 <span className={styles.resolvedIcon}>✓</span>\n                 <span className={styles.resolvedText}>\n                   Resolved on{' '}\n-                  {new Date(issue.resolvedAt).toLocaleString('en-US', {\n+                  {new Date(feedback.resolvedAt).toLocaleString('en-US', {\n                     dateStyle: 'medium',\n                     timeStyle: 'short',\n                     hour12: false,\n                   })}\n                 </span>\n-                {issue.resolutionComment && (\n+                {feedback.resolutionComment && (\n                   <div className={styles.resolutionComment}>\n                     <p className={styles.resolutionCommentTitle}>\n                       Resolution Comment:\n                     </p>\n                     <p className={styles.resolutionCommentText}>\n-                      {issue.resolutionComment}\n+                      {feedback.resolutionComment}\n                     </p>\n                   </div>\n                 )}\n@@ -140,7 +144,7 @@ export const ReviewIssuesList: React.FC<ReviewIssuesListProps> = ({\n           </div>\n         ))\n       ) : (\n-        <p className={styles.noIssues}>No review issues found.</p>\n+        <p className={styles.noFeedbacks}>No review feedbacks found.</p>\n       )}\n     </div>\n   )"
        },
        {
            "filename": "frontend/apps/app/features/migrations/contexts/ReviewFeedbackContext.tsx",
            "status": "added",
            "changes": 71,
            "patch": "@@ -0,0 +1,71 @@\n+'use client'\n+\n+import type { Tables } from '@liam-hq/db/supabase/database.types'\n+import {\n+  type ReactNode,\n+  createContext,\n+  useContext,\n+  useEffect,\n+  useState,\n+} from 'react'\n+\n+type ReviewFeedback = Tables<'ReviewFeedback'> & {\n+  suggestionSnippets: Array<{\n+    id: number\n+    filename: string\n+    snippet: string\n+  }>\n+}\n+\n+type ReviewFeedbackContextType = {\n+  feedbacks: ReviewFeedback[]\n+  updateFeedback: (feedbackId: number, updates: Partial<ReviewFeedback>) => void\n+}\n+\n+const ReviewFeedbackContext = createContext<\n+  ReviewFeedbackContextType | undefined\n+>(undefined)\n+\n+export const useReviewFeedbacks = () => {\n+  const context = useContext(ReviewFeedbackContext)\n+  if (!context) {\n+    throw new Error(\n+      'useReviewFeedbacks must be used within a ReviewFeedbackProvider',\n+    )\n+  }\n+  return context\n+}\n+\n+type ReviewFeedbackProviderProps = {\n+  initialFeedbacks: ReviewFeedback[]\n+  children: ReactNode\n+}\n+\n+export const ReviewFeedbackProvider = ({\n+  initialFeedbacks,\n+  children,\n+}: ReviewFeedbackProviderProps) => {\n+  const [feedbacks, setFeedbacks] = useState<ReviewFeedback[]>(initialFeedbacks)\n+\n+  // Update feedbacks when initialFeedbacks changes\n+  useEffect(() => {\n+    setFeedbacks(initialFeedbacks)\n+  }, [initialFeedbacks])\n+\n+  const updateFeedback = (\n+    feedbackId: number,\n+    updates: Partial<ReviewFeedback>,\n+  ) => {\n+    setFeedbacks((prevFeedbacks) =>\n+      prevFeedbacks.map((feedback) =>\n+        feedback.id === feedbackId ? { ...feedback, ...updates } : feedback,\n+      ),\n+    )\n+  }\n+\n+  return (\n+    <ReviewFeedbackContext.Provider value={{ feedbacks, updateFeedback }}>\n+      {children}\n+    </ReviewFeedbackContext.Provider>\n+  )\n+}"
        },
        {
            "filename": "frontend/apps/app/features/migrations/contexts/ReviewIssuesContext.tsx",
            "status": "removed",
            "changes": 68,
            "patch": "@@ -1,68 +0,0 @@\n-'use client'\n-\n-import type { Tables } from '@liam-hq/db/supabase/database.types'\n-import {\n-  type ReactNode,\n-  createContext,\n-  useContext,\n-  useEffect,\n-  useState,\n-} from 'react'\n-\n-type ReviewIssue = Tables<'ReviewIssue'> & {\n-  suggestionSnippets: Array<{\n-    id: number\n-    filename: string\n-    snippet: string\n-  }>\n-}\n-\n-type ReviewIssuesContextType = {\n-  issues: ReviewIssue[]\n-  updateIssue: (issueId: number, updates: Partial<ReviewIssue>) => void\n-}\n-\n-const ReviewIssuesContext = createContext<ReviewIssuesContextType | undefined>(\n-  undefined,\n-)\n-\n-export const useReviewIssues = () => {\n-  const context = useContext(ReviewIssuesContext)\n-  if (!context) {\n-    throw new Error(\n-      'useReviewIssues must be used within a ReviewIssuesProvider',\n-    )\n-  }\n-  return context\n-}\n-\n-type ReviewIssuesProviderProps = {\n-  initialIssues: ReviewIssue[]\n-  children: ReactNode\n-}\n-\n-export const ReviewIssuesProvider = ({\n-  initialIssues,\n-  children,\n-}: ReviewIssuesProviderProps) => {\n-  const [issues, setIssues] = useState<ReviewIssue[]>(initialIssues)\n-\n-  // Update issues when initialIssues changes\n-  useEffect(() => {\n-    setIssues(initialIssues)\n-  }, [initialIssues])\n-\n-  const updateIssue = (issueId: number, updates: Partial<ReviewIssue>) => {\n-    setIssues((prevIssues) =>\n-      prevIssues.map((issue) =>\n-        issue.id === issueId ? { ...issue, ...updates } : issue,\n-      ),\n-    )\n-  }\n-\n-  return (\n-    <ReviewIssuesContext.Provider value={{ issues, updateIssue }}>\n-      {children}\n-    </ReviewIssuesContext.Provider>\n-  )\n-}"
        },
        {
            "filename": "frontend/apps/app/features/migrations/pages/MigrationDetailPage/MigrationDetailPage.module.css",
            "status": "modified",
            "changes": 6,
            "patch": "@@ -137,15 +137,15 @@\n   margin-bottom: 0;\n }\n \n-/* Review Issues Styles */\n-.reviewIssues {\n+/* Review Feedbacks Styles */\n+.reviewFeedbacks {\n   display: flex;\n   flex-direction: column;\n   gap: var(--spacing-3, 12px);\n   margin-top: var(--spacing-4, 16px);\n }\n \n-.reviewIssue {\n+.reviewFeedback {\n   padding: var(--spacing-3, 12px);\n   border-radius: var(--border-radius-md, 6px);\n   border-left: 4px solid;"
        },
        {
            "filename": "frontend/apps/app/features/migrations/pages/MigrationDetailPage/MigrationDetailPage.tsx",
            "status": "modified",
            "changes": 27,
            "patch": "@@ -7,9 +7,9 @@ import type { FC } from 'react'\n import { CopyButton } from '../../../../components/CopyButton/CopyButton'\n import { UserFeedbackClient } from '../../../../components/UserFeedbackClient'\n import { MigrationHealthClient } from '../../components/MigrationHealthClient/MigrationHealthClient'\n-import { ReviewIssuesList } from '../../components/ReviewIssuesList/ReviewIssuesList'\n-import { ReviewIssuesProvider } from '../../contexts/ReviewIssuesContext'\n-import { formatAllReviewIssues } from '../../utils/formatReviewIssue'\n+import { ReviewFeedbackList } from '../../components/ReviewFeedbackList/ReviewFeedbackList'\n+import { ReviewFeedbackProvider } from '../../contexts/ReviewFeedbackContext'\n+import { formatAllReviewFeedbacks } from '../../utils/formatReviewFeedback'\n import styles from './MigrationDetailPage.module.css'\n \n type Props = {\n@@ -55,7 +55,7 @@ async function getMigrationContents(migrationId: string) {\n     .from('OverallReview')\n     .select(`\n       *,\n-      reviewIssues:ReviewIssue (\n+      reviewFeedbacks:ReviewFeedback (\n         id,\n         category,\n         severity,\n@@ -102,7 +102,7 @@ async function getMigrationContents(migrationId: string) {\n         projectId: null,\n         reviewComment: null,\n         reviewedAt: null,\n-        reviewIssues: [],\n+        reviewFeedbacks: [],\n       },\n       erdLinks: [],\n       knowledgeSuggestions: [],\n@@ -211,7 +211,9 @@ export const MigrationDetailPage: FC<Props> = async ({\n         <p className={styles.subTitle}>#{migration.PullRequest.pullNumber}</p>\n       </div>\n       <div className={styles.twoColumns}>\n-        <ReviewIssuesProvider initialIssues={overallReview.reviewIssues}>\n+        <ReviewFeedbackProvider\n+          initialFeedbacks={overallReview.reviewFeedbacks}\n+        >\n           <div className={styles.box}>\n             <h2 className={styles.h2}>Migration Health</h2>\n             <div className={styles.healthContent}>\n@@ -247,19 +249,20 @@ export const MigrationDetailPage: FC<Props> = async ({\n           </div>\n           <div className={styles.box}>\n             <div className={styles.sectionHeader}>\n-              <h2 className={styles.h2}>Review Issues</h2>\n-              {overallReview.reviewIssues.filter(\n-                (issue) => issue.severity === 'CRITICAL' && !issue.resolvedAt,\n+              <h2 className={styles.h2}>Review Feedbacks</h2>\n+              {overallReview.reviewFeedbacks.filter(\n+                (feedback) =>\n+                  feedback.severity === 'CRITICAL' && !feedback.resolvedAt,\n               ).length > 0 && (\n                 <CopyButton\n-                  text={formatAllReviewIssues(overallReview.reviewIssues)}\n+                  text={formatAllReviewFeedbacks(overallReview.reviewFeedbacks)}\n                   className={styles.headerCopyButton}\n                 />\n               )}\n             </div>\n-            <ReviewIssuesList />\n+            <ReviewFeedbackList />\n           </div>\n-        </ReviewIssuesProvider>\n+        </ReviewFeedbackProvider>\n \n         {/* Knowledge Suggestions Section */}\n         <div className={styles.box}>"
        },
        {
            "filename": "frontend/apps/app/features/migrations/utils/calculateScores.ts",
            "status": "modified",
            "changes": 66,
            "patch": "@@ -2,7 +2,7 @@\n \n import type { CategoryEnum } from '../components/RadarChart/RadarChart'\n \n-export type ReviewIssueForScore = {\n+export type ReviewFeedbackForScore = {\n   category: string\n   severity: string\n   resolvedAt?: string | null\n@@ -16,50 +16,52 @@ export type CalculatedScore = {\n }\n \n /**\n- * Calculates scores from review issues, excluding resolved issues\n+ * Calculates scores from review feedbacks, excluding resolved feedbacks\n  */\n export const calculateScoresFromIssues = (\n-  issues: ReviewIssueForScore[],\n+  feedbacks: ReviewFeedbackForScore[],\n ): CalculatedScore[] => {\n-  // Group issues by category\n-  const issuesByCategory = issues.reduce<\n+  // Group feedbacks by category\n+  const feedbacksByCategory = feedbacks.reduce<\n     Record<string, Array<{ severity: string; resolvedAt?: string | null }>>\n-  >((acc, issue) => {\n-    if (!acc[issue.category]) {\n-      acc[issue.category] = []\n+  >((acc, feedback) => {\n+    if (!acc[feedback.category]) {\n+      acc[feedback.category] = []\n     }\n-    acc[issue.category].push({\n-      severity: issue.severity,\n-      resolvedAt: issue.resolvedAt,\n+    acc[feedback.category].push({\n+      severity: feedback.severity,\n+      resolvedAt: feedback.resolvedAt,\n     })\n     return acc\n   }, {})\n \n   // Calculate scores for each category\n-  return Object.entries(issuesByCategory).map(([category, categoryIssues]) => {\n-    // Start with 10 points\n-    let score = 10\n+  return Object.entries(feedbacksByCategory).map(\n+    ([category, categoryFeedbacks]) => {\n+      // Start with 10 points\n+      let score = 10\n \n-    // Calculate deductions based on issue severity (only for unresolved issues)\n-    for (const issue of categoryIssues) {\n-      if (issue.resolvedAt) continue // Skip resolved issues\n+      // Calculate deductions based on feedback severity (only for unresolved feedbacks)\n+      for (const feedback of categoryFeedbacks) {\n+        if (feedback.resolvedAt) continue // Skip resolved feedbacks\n \n-      if (issue.severity === 'CRITICAL') {\n-        score -= 3\n-      } else if (issue.severity === 'WARNING') {\n-        score -= 1\n+        if (feedback.severity === 'CRITICAL') {\n+          score -= 3\n+        } else if (feedback.severity === 'WARNING') {\n+          score -= 1\n+        }\n+        // No deduction for POSITIVE or QUESTION feedback\n       }\n-      // No deduction for POSITIVE or QUESTION feedback\n-    }\n \n-    // Ensure minimum score is 0\n-    score = Math.max(0, score)\n+      // Ensure minimum score is 0\n+      score = Math.max(0, score)\n \n-    return {\n-      id: Number.parseInt(category, 10), // Use category as ID\n-      overallReviewId: 0, // Not needed anymore\n-      overallScore: score,\n-      category: category as CategoryEnum,\n-    }\n-  })\n+      return {\n+        id: Number.parseInt(category, 10), // Use category as ID\n+        overallReviewId: 0, // Not needed anymore\n+        overallScore: score,\n+        category: category as CategoryEnum,\n+      }\n+    },\n+  )\n }"
        },
        {
            "filename": "frontend/apps/app/features/migrations/utils/calculateScoresServer.ts",
            "status": "modified",
            "changes": 66,
            "patch": "@@ -2,7 +2,7 @@\n \n import type { CategoryEnum } from '../components/RadarChart/RadarChart'\n \n-export type ReviewIssueForScore = {\n+export type ReviewFeedbackForScore = {\n   category: string\n   severity: string\n   resolvedAt?: string | null\n@@ -16,50 +16,52 @@ export type CalculatedScore = {\n }\n \n /**\n- * Calculates scores from review issues, excluding resolved issues\n+ * Calculates scores from review feedbacks, excluding resolved feedbacks\n  */\n export const calculateScoresFromIssues = (\n-  issues: ReviewIssueForScore[],\n+  feedbacks: ReviewFeedbackForScore[],\n ): CalculatedScore[] => {\n-  // Group issues by category\n-  const issuesByCategory = issues.reduce<\n+  // Group feedbacks by category\n+  const feedbacksByCategory = feedbacks.reduce<\n     Record<string, Array<{ severity: string; resolvedAt?: string | null }>>\n-  >((acc, issue) => {\n-    if (!acc[issue.category]) {\n-      acc[issue.category] = []\n+  >((acc, feedback) => {\n+    if (!acc[feedback.category]) {\n+      acc[feedback.category] = []\n     }\n-    acc[issue.category].push({\n-      severity: issue.severity,\n-      resolvedAt: issue.resolvedAt,\n+    acc[feedback.category].push({\n+      severity: feedback.severity,\n+      resolvedAt: feedback.resolvedAt,\n     })\n     return acc\n   }, {})\n \n   // Calculate scores for each category\n-  return Object.entries(issuesByCategory).map(([category, categoryIssues]) => {\n-    // Start with 10 points\n-    let score = 10\n+  return Object.entries(feedbacksByCategory).map(\n+    ([category, categoryFeedbacks]) => {\n+      // Start with 10 points\n+      let score = 10\n \n-    // Calculate deductions based on issue severity (only for unresolved issues)\n-    for (const issue of categoryIssues) {\n-      if (issue.resolvedAt) continue // Skip resolved issues\n+      // Calculate deductions based on feedback severity (only for unresolved feedbacks)\n+      for (const feedback of categoryFeedbacks) {\n+        if (feedback.resolvedAt) continue // Skip resolved feedbacks\n \n-      if (issue.severity === 'CRITICAL') {\n-        score -= 3\n-      } else if (issue.severity === 'WARNING') {\n-        score -= 1\n+        if (feedback.severity === 'CRITICAL') {\n+          score -= 3\n+        } else if (feedback.severity === 'WARNING') {\n+          score -= 1\n+        }\n+        // No deduction for POSITIVE or QUESTION feedback\n       }\n-      // No deduction for POSITIVE or QUESTION feedback\n-    }\n \n-    // Ensure minimum score is 0\n-    score = Math.max(0, score)\n+      // Ensure minimum score is 0\n+      score = Math.max(0, score)\n \n-    return {\n-      id: Number.parseInt(category, 10), // Use category as ID\n-      overallReviewId: 0, // Not needed anymore\n-      overallScore: score,\n-      category: category as CategoryEnum,\n-    }\n-  })\n+      return {\n+        id: Number.parseInt(category, 10), // Use category as ID\n+        overallReviewId: 0, // Not needed anymore\n+        overallScore: score,\n+        category: category as CategoryEnum,\n+      }\n+    },\n+  )\n }"
        },
        {
            "filename": "frontend/apps/app/features/migrations/utils/formatReviewFeedback.ts",
            "status": "renamed",
            "changes": 42,
            "patch": "@@ -1,7 +1,7 @@\n /**\n- * Formats a review issue into a standardized prompt format\n+ * Formats a review feedback into a standardized prompt format\n  */\n-export function formatReviewIssue({\n+export function formatReviewFeedback({\n   category,\n   severity,\n   description,\n@@ -17,16 +17,16 @@ export function formatReviewIssue({\n     snippet: string\n   }>\n }): string {\n-  const issueDetails = `\n+  const feedbackDetails = `\n - Category: ${category}\n - Severity: ${severity}\n - Issue: ${description}\n - Suggestion: ${suggestion}`\n \n   const promptText =\n     severity === 'WARNING'\n-      ? `Please review the following warning and determine if optimization is necessary. If the warning is valid and optimization would improve the code, please provide specific optimization suggestions. If the warning can be safely ignored, please explain why:${issueDetails}`\n-      : `Please optimize the code based on the following Review Issue:${issueDetails}`\n+      ? `Please review the following warning and determine if optimization is necessary. If the warning is valid and optimization would improve the code, please provide specific optimization suggestions. If the warning can be safely ignored, please explain why:${feedbackDetails}`\n+      : `Please optimize the code based on the following Review Feedback:${feedbackDetails}`\n \n   let formattedText = promptText\n \n@@ -43,10 +43,10 @@ export function formatReviewIssue({\n }\n \n /**\n- * Formats all review issues into a single text\n+ * Formats all review feedbacks into a single text\n  */\n-export function formatAllReviewIssues(\n-  issues: Array<{\n+export function formatAllReviewFeedbacks(\n+  feedbacks: Array<{\n     id: number\n     category: string\n     severity: string\n@@ -60,23 +60,23 @@ export function formatAllReviewIssues(\n     }>\n   }>,\n ): string {\n-  // Filter issues to only include critical severity and unresolved issues\n-  const filteredIssues = issues.filter(\n-    (issue) => issue.severity === 'CRITICAL' && !issue.resolvedAt,\n+  // Filter feedbacks to only include critical severity and unresolved feedbacks\n+  const filteredFeedbacks = feedbacks.filter(\n+    (feedback) => feedback.severity === 'CRITICAL' && !feedback.resolvedAt,\n   )\n \n-  if (filteredIssues.length === 0) {\n-    return 'No critical unresolved review issues found.'\n+  if (filteredFeedbacks.length === 0) {\n+    return 'No critical unresolved review feedbacks found.'\n   }\n \n-  return filteredIssues\n-    .map((issue) =>\n-      formatReviewIssue({\n-        category: issue.category,\n-        severity: issue.severity,\n-        description: issue.description,\n-        suggestion: issue.suggestion,\n-        snippets: issue.suggestionSnippets.map((snippet) => ({\n+  return filteredFeedbacks\n+    .map((feedback) =>\n+      formatReviewFeedback({\n+        category: feedback.category,\n+        severity: feedback.severity,\n+        description: feedback.description,\n+        suggestion: feedback.suggestion,\n+        snippets: feedback.suggestionSnippets.map((snippet) => ({\n           filename: snippet.filename,\n           snippet: snippet.snippet,\n         })),"
        },
        {
            "filename": "frontend/packages/db/schema/schema.sql",
            "status": "modified",
            "changes": 36,
            "patch": "@@ -529,7 +529,7 @@ ALTER SEQUENCE \"public\".\"Repository_id_seq\" OWNED BY \"public\".\"Repository\".\"id\";\n \n \n \n-CREATE TABLE IF NOT EXISTS \"public\".\"ReviewIssue\" (\n+CREATE TABLE IF NOT EXISTS \"public\".\"ReviewFeedback\" (\n     \"id\" integer NOT NULL,\n     \"overallReviewId\" integer NOT NULL,\n     \"category\" \"public\".\"CategoryEnum\" NOT NULL,\n@@ -543,21 +543,21 @@ CREATE TABLE IF NOT EXISTS \"public\".\"ReviewIssue\" (\n );\n \n \n-ALTER TABLE \"public\".\"ReviewIssue\" OWNER TO \"postgres\";\n+ALTER TABLE \"public\".\"ReviewFeedback\" OWNER TO \"postgres\";\n \n \n-CREATE SEQUENCE IF NOT EXISTS \"public\".\"ReviewIssue_id_seq\"\n+CREATE SEQUENCE IF NOT EXISTS \"public\".\"ReviewFeedback_id_seq\"\n     START WITH 1\n     INCREMENT BY 1\n     NO MINVALUE\n     NO MAXVALUE\n     CACHE 1;\n \n \n-ALTER TABLE \"public\".\"ReviewIssue_id_seq\" OWNER TO \"postgres\";\n+ALTER TABLE \"public\".\"ReviewFeedback_id_seq\" OWNER TO \"postgres\";\n \n \n-ALTER SEQUENCE \"public\".\"ReviewIssue_id_seq\" OWNED BY \"public\".\"ReviewIssue\".\"id\";\n+ALTER SEQUENCE \"public\".\"ReviewFeedback_id_seq\" OWNED BY \"public\".\"ReviewFeedback\".\"id\";\n \n \n \n@@ -574,7 +574,7 @@ ALTER TABLE \"public\".\"ReviewSuggestionSnippet_id_seq\" OWNER TO \"postgres\";\n \n CREATE TABLE IF NOT EXISTS \"public\".\"ReviewSuggestionSnippet\" (\n     \"id\" integer DEFAULT \"nextval\"('\"public\".\"ReviewSuggestionSnippet_id_seq\"'::\"regclass\") NOT NULL,\n-    \"reviewIssueId\" integer NOT NULL,\n+    \"reviewFeedbackId\" integer NOT NULL,\n     \"filename\" \"text\" NOT NULL,\n     \"snippet\" \"text\" NOT NULL,\n     \"createdAt\" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,\n@@ -654,7 +654,7 @@ ALTER TABLE ONLY \"public\".\"Repository\" ALTER COLUMN \"id\" SET DEFAULT \"nextval\"('\n \n \n \n-ALTER TABLE ONLY \"public\".\"ReviewIssue\" ALTER COLUMN \"id\" SET DEFAULT \"nextval\"('\"public\".\"ReviewIssue_id_seq\"'::\"regclass\");\n+ALTER TABLE ONLY \"public\".\"ReviewFeedback\" ALTER COLUMN \"id\" SET DEFAULT \"nextval\"('\"public\".\"ReviewFeedback_id_seq\"'::\"regclass\");\n \n \n \n@@ -738,8 +738,8 @@ ALTER TABLE ONLY \"public\".\"Repository\"\n \n \n \n-ALTER TABLE ONLY \"public\".\"ReviewIssue\"\n-    ADD CONSTRAINT \"ReviewIssue_pkey\" PRIMARY KEY (\"id\");\n+ALTER TABLE ONLY \"public\".\"ReviewFeedback\"\n+    ADD CONSTRAINT \"ReviewFeedback_pkey\" PRIMARY KEY (\"id\");\n \n \n \n@@ -901,13 +901,13 @@ ALTER TABLE ONLY \"public\".\"PullRequest\"\n \n \n \n-ALTER TABLE ONLY \"public\".\"ReviewIssue\"\n-    ADD CONSTRAINT \"ReviewIssue_overallReviewId_fkey\" FOREIGN KEY (\"overallReviewId\") REFERENCES \"public\".\"OverallReview\"(\"id\") ON UPDATE CASCADE ON DELETE RESTRICT;\n+ALTER TABLE ONLY \"public\".\"ReviewFeedback\"\n+    ADD CONSTRAINT \"ReviewFeedback_overallReviewId_fkey\" FOREIGN KEY (\"overallReviewId\") REFERENCES \"public\".\"OverallReview\"(\"id\") ON UPDATE CASCADE ON DELETE RESTRICT;\n \n \n \n ALTER TABLE ONLY \"public\".\"ReviewSuggestionSnippet\"\n-    ADD CONSTRAINT \"ReviewSuggestionSnippet_reviewIssueId_fkey\" FOREIGN KEY (\"reviewIssueId\") REFERENCES \"public\".\"ReviewIssue\"(\"id\") ON UPDATE CASCADE ON DELETE CASCADE;\n+    ADD CONSTRAINT \"ReviewSuggestionSnippet_reviewFeedbackId_fkey\" FOREIGN KEY (\"reviewFeedbackId\") REFERENCES \"public\".\"ReviewFeedback\"(\"id\") ON UPDATE CASCADE ON DELETE CASCADE;\n \n \n \n@@ -1295,15 +1295,15 @@ GRANT ALL ON SEQUENCE \"public\".\"Repository_id_seq\" TO \"service_role\";\n \n \n \n-GRANT ALL ON TABLE \"public\".\"ReviewIssue\" TO \"anon\";\n-GRANT ALL ON TABLE \"public\".\"ReviewIssue\" TO \"authenticated\";\n-GRANT ALL ON TABLE \"public\".\"ReviewIssue\" TO \"service_role\";\n+GRANT ALL ON TABLE \"public\".\"ReviewFeedback\" TO \"anon\";\n+GRANT ALL ON TABLE \"public\".\"ReviewFeedback\" TO \"authenticated\";\n+GRANT ALL ON TABLE \"public\".\"ReviewFeedback\" TO \"service_role\";\n \n \n \n-GRANT ALL ON SEQUENCE \"public\".\"ReviewIssue_id_seq\" TO \"anon\";\n-GRANT ALL ON SEQUENCE \"public\".\"ReviewIssue_id_seq\" TO \"authenticated\";\n-GRANT ALL ON SEQUENCE \"public\".\"ReviewIssue_id_seq\" TO \"service_role\";\n+GRANT ALL ON SEQUENCE \"public\".\"ReviewFeedback_id_seq\" TO \"anon\";\n+GRANT ALL ON SEQUENCE \"public\".\"ReviewFeedback_id_seq\" TO \"authenticated\";\n+GRANT ALL ON SEQUENCE \"public\".\"ReviewFeedback_id_seq\" TO \"service_role\";\n \n \n "
        },
        {
            "filename": "frontend/packages/db/supabase/database.types.ts",
            "status": "modified",
            "changes": 16,
            "patch": "@@ -580,7 +580,7 @@ export type Database = {\n         }\n         Relationships: []\n       }\n-      ReviewIssue: {\n+      ReviewFeedback: {\n         Row: {\n           category: Database['public']['Enums']['CategoryEnum']\n           createdAt: string\n@@ -619,7 +619,7 @@ export type Database = {\n         }\n         Relationships: [\n           {\n-            foreignKeyName: 'ReviewIssue_overallReviewId_fkey'\n+            foreignKeyName: 'ReviewFeedback_overallReviewId_fkey'\n             columns: ['overallReviewId']\n             isOneToOne: false\n             referencedRelation: 'OverallReview'\n@@ -632,32 +632,32 @@ export type Database = {\n           createdAt: string\n           filename: string\n           id: number\n-          reviewIssueId: number\n+          reviewFeedbackId: number\n           snippet: string\n           updatedAt: string\n         }\n         Insert: {\n           createdAt?: string\n           filename: string\n           id?: number\n-          reviewIssueId: number\n+          reviewFeedbackId: number\n           snippet: string\n           updatedAt: string\n         }\n         Update: {\n           createdAt?: string\n           filename?: string\n           id?: number\n-          reviewIssueId?: number\n+          reviewFeedbackId?: number\n           snippet?: string\n           updatedAt?: string\n         }\n         Relationships: [\n           {\n-            foreignKeyName: 'ReviewSuggestionSnippet_reviewIssueId_fkey'\n-            columns: ['reviewIssueId']\n+            foreignKeyName: 'ReviewSuggestionSnippet_reviewFeedbackId_fkey'\n+            columns: ['reviewFeedbackId']\n             isOneToOne: false\n-            referencedRelation: 'ReviewIssue'\n+            referencedRelation: 'ReviewFeedback'\n             referencedColumns: ['id']\n           },\n         ]"
        },
        {
            "filename": "frontend/packages/db/supabase/migrations/20250411182646_rename_review_issue_to_review_feedback.sql",
            "status": "added",
            "changes": 23,
            "patch": "@@ -0,0 +1,23 @@\n+-- Rename ReviewIssue table to ReviewFeedback\n+BEGIN;\n+\n+-- Rename the table\n+ALTER TABLE \"public\".\"ReviewIssue\" RENAME TO \"ReviewFeedback\";\n+\n+-- Rename the sequence\n+ALTER SEQUENCE \"public\".\"ReviewIssue_id_seq\" RENAME TO \"ReviewFeedback_id_seq\";\n+\n+-- Rename the primary key constraint\n+ALTER TABLE \"public\".\"ReviewFeedback\" RENAME CONSTRAINT \"ReviewIssue_pkey\" TO \"ReviewFeedback_pkey\";\n+\n+-- Rename the foreign key constraint\n+ALTER TABLE \"public\".\"ReviewFeedback\" RENAME CONSTRAINT \"ReviewIssue_overallReviewId_fkey\" TO \"ReviewFeedback_overallReviewId_fkey\";\n+\n+-- Update the foreign key constraint in ReviewSuggestionSnippet table\n+ALTER TABLE \"public\".\"ReviewSuggestionSnippet\" DROP CONSTRAINT \"ReviewSuggestionSnippet_reviewIssueId_fkey\";\n+ALTER TABLE \"public\".\"ReviewSuggestionSnippet\" RENAME COLUMN \"reviewIssueId\" TO \"reviewFeedbackId\";\n+ALTER TABLE \"public\".\"ReviewSuggestionSnippet\" ADD CONSTRAINT \"ReviewSuggestionSnippet_reviewFeedbackId_fkey\" \n+  FOREIGN KEY (\"reviewFeedbackId\") REFERENCES \"public\".\"ReviewFeedback\"(\"id\") \n+  ON UPDATE CASCADE ON DELETE CASCADE;\n+\n+COMMIT;"
        },
        {
            "filename": "frontend/packages/jobs/src/functions/__tests__/processSaveReview.test.ts",
            "status": "modified",
            "changes": 6,
            "patch": "@@ -55,9 +55,9 @@ describe.skip('processSaveReview', () => {\n \n     if (reviews && reviews.length > 0) {\n       const reviewIds = reviews.map((r) => r.id)\n-      // Delete associated ReviewIssues\n+      // Delete associated ReviewFeedbacks\n       await supabase\n-        .from('ReviewIssue')\n+        .from('ReviewFeedback')\n         .delete()\n         .in('overallReviewId', reviewIds)\n       // Delete OverallReviews\n@@ -104,7 +104,7 @@ describe.skip('processSaveReview', () => {\n     expect(review.projectId).toBe(testProject.id)\n \n     const { data: issues, error: issuesError } = await supabase\n-      .from('ReviewIssue')\n+      .from('ReviewFeedback')\n       .select('*')\n       .eq('overallReviewId', review.id)\n     if (issuesError) throw issuesError"
        },
        {
            "filename": "frontend/packages/jobs/src/functions/processSaveReview.ts",
            "status": "modified",
            "changes": 22,
            "patch": "@@ -40,10 +40,10 @@ export const processSaveReview = async (\n       )\n     }\n \n-    // Create review issues directly from the feedback data\n+    // Create review feedbacks directly from the feedback data\n \n-    // Create review issues\n-    const reviewIssues = payload.review.feedbacks.map((feedback) => ({\n+    // Create review feedbacks\n+    const reviewFeedbacks = payload.review.feedbacks.map((feedback) => ({\n       overallReviewId: overallReview.id,\n       category: mapCategoryEnum(feedback.kind),\n       severity: feedback.severity,\n@@ -52,14 +52,12 @@ export const processSaveReview = async (\n       updatedAt: now,\n     }))\n \n-    const { data: insertedIssues, error: reviewIssuesError } = await supabase\n-      .from('ReviewIssue')\n-      .insert(reviewIssues)\n-      .select('id')\n+    const { data: insertedFeedbacks, error: reviewFeedbacksError } =\n+      await supabase.from('ReviewFeedback').insert(reviewFeedbacks).select('id')\n \n-    if (reviewIssuesError || !insertedIssues) {\n+    if (reviewFeedbacksError || !insertedFeedbacks) {\n       throw new Error(\n-        `Failed to create review issues: ${JSON.stringify(reviewIssuesError)}`,\n+        `Failed to create review issues: ${JSON.stringify(reviewFeedbacksError)}`,\n       )\n     }\n \n@@ -73,10 +71,10 @@ export const processSaveReview = async (\n           index: number,\n         ) =>\n           feedback.suggestionSnippets.map((snippet) =>\n-            insertedIssues[index]\n+            insertedFeedbacks[index]\n               ? {\n                   ...snippet,\n-                  reviewIssueId: insertedIssues[index].id,\n+                  reviewFeedbackId: insertedFeedbacks[index].id,\n                   updatedAt: now,\n                 }\n               : null,\n@@ -85,7 +83,7 @@ export const processSaveReview = async (\n       .filter(Boolean) as Array<{\n       filename: string\n       snippet: string\n-      reviewIssueId: number\n+      reviewFeedbackId: number\n       updatedAt: string\n     }>\n "
        },
        {
            "filename": "frontend/packages/prompt-test/src/fixtures/github.com/liam-hq/liam/pull/1105/fixture.yaml",
            "status": "modified",
            "changes": 32,
            "patch": "@@ -379,7 +379,7 @@ vars:\n       \n       \n       \n-      CREATE TABLE IF NOT EXISTS \"public\".\"ReviewIssue\" (\n+      CREATE TABLE IF NOT EXISTS \"public\".\"ReviewFeedback\" (\n           \"id\" integer NOT NULL,\n           \"overallReviewId\" integer NOT NULL,\n           \"category\" \"public\".\"CategoryEnum\" NOT NULL,\n@@ -391,21 +391,21 @@ vars:\n       );\n       \n       \n-      ALTER TABLE \"public\".\"ReviewIssue\" OWNER TO \"postgres\";\n+      ALTER TABLE \"public\".\"ReviewFeedback\" OWNER TO \"postgres\";\n       \n       \n-      CREATE SEQUENCE IF NOT EXISTS \"public\".\"ReviewIssue_id_seq\"\n+      CREATE SEQUENCE IF NOT EXISTS \"public\".\"ReviewFeedback_id_seq\"\n           START WITH 1\n           INCREMENT BY 1\n           NO MINVALUE\n           NO MAXVALUE\n           CACHE 1;\n       \n       \n-      ALTER TABLE \"public\".\"ReviewIssue_id_seq\" OWNER TO \"postgres\";\n+      ALTER TABLE \"public\".\"ReviewFeedback_id_seq\" OWNER TO \"postgres\";\n       \n       \n-      ALTER SEQUENCE \"public\".\"ReviewIssue_id_seq\" OWNED BY \"public\".\"ReviewIssue\".\"id\";\n+      ALTER SEQUENCE \"public\".\"ReviewFeedback_id_seq\" OWNED BY \"public\".\"ReviewFeedback\".\"id\";\n       \n       \n       \n@@ -460,7 +460,7 @@ vars:\n       \n       \n       \n-      ALTER TABLE ONLY \"public\".\"ReviewIssue\" ALTER COLUMN \"id\" SET DEFAULT \"nextval\"('\"public\".\"ReviewIssue_id_seq\"'::\"regclass\");\n+      ALTER TABLE ONLY \"public\".\"ReviewFeedback\" ALTER COLUMN \"id\" SET DEFAULT \"nextval\"('\"public\".\"ReviewFeedback_id_seq\"'::\"regclass\");\n       \n       \n       \n@@ -515,8 +515,8 @@ vars:\n       \n       \n       \n-      ALTER TABLE ONLY \"public\".\"ReviewIssue\"\n-          ADD CONSTRAINT \"ReviewIssue_pkey\" PRIMARY KEY (\"id\");\n+      ALTER TABLE ONLY \"public\".\"ReviewFeedback\"\n+          ADD CONSTRAINT \"ReviewFeedback_pkey\" PRIMARY KEY (\"id\");\n       \n       \n       \n@@ -590,8 +590,8 @@ vars:\n       \n       \n       \n-      ALTER TABLE ONLY \"public\".\"ReviewIssue\"\n-          ADD CONSTRAINT \"ReviewIssue_overallReviewId_fkey\" FOREIGN KEY (\"overallReviewId\") REFERENCES \"public\".\"OverallReview\"(\"id\") ON UPDATE CASCADE ON DELETE RESTRICT;\n+      ALTER TABLE ONLY \"public\".\"ReviewFeedback\"\n+          ADD CONSTRAINT \"ReviewFeedback_overallReviewId_fkey\" FOREIGN KEY (\"overallReviewId\") REFERENCES \"public\".\"OverallReview\"(\"id\") ON UPDATE CASCADE ON DELETE RESTRICT;\n       \n       \n       \n@@ -914,15 +914,15 @@ vars:\n       \n       \n       \n-      GRANT ALL ON TABLE \"public\".\"ReviewIssue\" TO \"anon\";\n-      GRANT ALL ON TABLE \"public\".\"ReviewIssue\" TO \"authenticated\";\n-      GRANT ALL ON TABLE \"public\".\"ReviewIssue\" TO \"service_role\";\n+      GRANT ALL ON TABLE \"public\".\"ReviewFeedback\" TO \"anon\";\n+      GRANT ALL ON TABLE \"public\".\"ReviewFeedback\" TO \"authenticated\";\n+      GRANT ALL ON TABLE \"public\".\"ReviewFeedback\" TO \"service_role\";\n       \n       \n       \n-      GRANT ALL ON SEQUENCE \"public\".\"ReviewIssue_id_seq\" TO \"anon\";\n-      GRANT ALL ON SEQUENCE \"public\".\"ReviewIssue_id_seq\" TO \"authenticated\";\n-      GRANT ALL ON SEQUENCE \"public\".\"ReviewIssue_id_seq\" TO \"service_role\";\n+      GRANT ALL ON SEQUENCE \"public\".\"ReviewFeedback_id_seq\" TO \"anon\";\n+      GRANT ALL ON SEQUENCE \"public\".\"ReviewFeedback_id_seq\" TO \"authenticated\";\n+      GRANT ALL ON SEQUENCE \"public\".\"ReviewFeedback_id_seq\" TO \"service_role\";\n       \n       \n       "
        }
    ],
    "prDescription": "- Rename ReviewIssue table and related entities to ReviewFeedback\r\n- Update associated components, contexts, actions, and styles\r\n- Maintain consistent naming across the codebase\r\n\r\n## Issue\r\n\r\n- resolve:\r\n\r\n## Why is this change needed?\r\n<!-- Please explain briefly why this change is necessary -->\r\n\r\n## What would you like reviewers to focus on?\r\n<!-- What specific aspects are you requesting review for? -->\r\n\r\n## Testing Verification\r\n<!-- Please describe how you verified these changes in your local environment using text/images/video -->\r\n\r\n## What was done\r\n<!-- This section will be filled by PR-Agent when the Pull Request is opened -->\r\n\r\npr_agent:summary\r\n\r\n## Detailed Changes\r\n<!-- This section will be filled by PR-Agent when the Pull Request is opened -->\r\n\r\npr_agent:walkthrough\r\n\r\n## Additional Notes\r\n<!-- Any additional information for reviewers -->\r\n",
    "prComments": "changeset-bot[bot]: ###  ⚠️  No Changeset found\n\nLatest commit: d4c8459c7d151bcd5c8493d544ac4de127cff8af\n\nMerging this PR will not cause a version bump for any packages. If these changes should not result in a new version, you're good to go. **If these changes should result in a version bump, you need to add a changeset.**\n\n<details><summary>This PR includes no changesets</summary>\n\n  When changesets are added to this PR, you'll see the packages that this PR includes changesets for and the associated semver types\n\n</details>\n\n[Click here to learn what changesets are, and how to add one](https://github.com/changesets/changesets/blob/main/docs/adding-a-changeset.md).\n\n[Click here if you're a maintainer who wants to add a changeset to this PR](https://github.com/liam-hq/liam/new/rename-review-issue-to-review-feedback?filename=.changeset/slimy-coins-sit.md&value=---%0A%22%40liam-hq%2Fapp%22%3A%20patch%0A%22%40liam-hq%2Fdb%22%3A%20patch%0A%22%40liam-hq%2Fjobs%22%3A%20patch%0A%22%40liam-hq%2Fprompt-test%22%3A%20patch%0A---%0A%0A%E2%99%BB%EF%B8%8F%20refactor%3A%20rename%20%60ReviewIssue%60%20to%20%60ReviewFeedback%60%0A)\n\n\n\nvercel[bot]: [vc]: #JbCcEwqS5L4v2kQltbUHkJ7uOmO+kIaf9HQvaRnG38M=:eyJpc01vbm9yZXBvIjp0cnVlLCJ0eXBlIjoiZ2l0aHViIiwicHJvamVjdHMiOlt7Im5hbWUiOiJsaWFtLWRvY3MiLCJyb290RGlyZWN0b3J5IjoiZnJvbnRlbmQvYXBwcy9kb2NzIiwibGl2ZUZlZWRiYWNrIjp7InJlc29sdmVkIjowLCJ1bnJlc29sdmVkIjowLCJ0b3RhbCI6MCwibGluayI6IiJ9LCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vcm91dGUtMDYtY29yZS9saWFtLWRvY3MvNHhWWTJOaVY0VHR4RDM4amQxZnVlaXFNNFZ2RiIsIm5leHRDb21taXRTdGF0dXMiOiJJR05PUkVEIiwicHJldmlld1VybCI6ImxpYW0tZG9jcy1naXQtcmVuYW1lLXJldmlldy1pc3N1ZS10by1yZXZpZS1jNTRiMmEtcm91dGUtMDYtY29yZS52ZXJjZWwuYXBwIn0seyJuYW1lIjoibGlhbS1lcmQtc2FtcGxlIiwicm9vdERpcmVjdG9yeSI6ImZyb250ZW5kL2FwcHMvZXJkLXNhbXBsZSIsImxpdmVGZWVkYmFjayI6eyJyZXNvbHZlZCI6MCwidW5yZXNvbHZlZCI6MCwidG90YWwiOjAsImxpbmsiOiJsaWFtLWVyZC1zYW1wbGUtZ2l0LXJlbmFtZS1yZXZpZXctaXNzdWUtdG8tMmVjNjE5LXJvdXRlLTA2LWNvcmUudmVyY2VsLmFwcCJ9LCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vcm91dGUtMDYtY29yZS9saWFtLWVyZC1zYW1wbGUvRkZockRaYUgzUXUzb2RUYzNmSDNiMld2Z3lzQyIsInByZXZpZXdVcmwiOiJsaWFtLWVyZC1zYW1wbGUtZ2l0LXJlbmFtZS1yZXZpZXctaXNzdWUtdG8tMmVjNjE5LXJvdXRlLTA2LWNvcmUudmVyY2VsLmFwcCIsIm5leHRDb21taXRTdGF0dXMiOiJQRU5ESU5HIn0seyJuYW1lIjoibGlhbS1hcHAiLCJyb290RGlyZWN0b3J5IjoiZnJvbnRlbmQvYXBwcy9hcHAiLCJpbnNwZWN0b3JVcmwiOiJodHRwczovL3ZlcmNlbC5jb20vcm91dGUtMDYtY29yZS9saWFtLWFwcC9HNmE2NmU5SzNhVzhXaEhpR3gxRUZoYlE1a3JOIiwicHJldmlld1VybCI6ImxpYW0tYXBwLWdpdC1yZW5hbWUtcmV2aWV3LWlzc3VlLXRvLXJldmlldy02N2Q2MjYtcm91dGUtMDYtY29yZS52ZXJjZWwuYXBwIiwibmV4dENvbW1pdFN0YXR1cyI6IlBFTkRJTkciLCJsaXZlRmVlZGJhY2siOnsicmVzb2x2ZWQiOjAsInVucmVzb2x2ZWQiOjAsInRvdGFsIjowLCJsaW5rIjoibGlhbS1hcHAtZ2l0LXJlbmFtZS1yZXZpZXctaXNzdWUtdG8tcmV2aWV3LTY3ZDYyNi1yb3V0ZS0wNi1jb3JlLnZlcmNlbC5hcHAifX1dfQ==\n**The latest updates on your projects**. Learn more about [Vercel for Git ↗︎](https://vercel.link/github-learn-more)\n\n| Name | Status | Preview | Comments | Updated (UTC) |\n| :--- | :----- | :------ | :------- | :------ |\n| **liam-app** | 🔄 Building ([Inspect](https://vercel.com/route-06-core/liam-app/G6a66e9K3aW8WhHiGx1EFhbQ5krN)) | [Visit Preview](https://liam-app-git-rename-review-issue-to-review-67d626-route-06-core.vercel.app) | 💬 [**Add feedback**](https://vercel.live/open-feedback/liam-app-git-rename-review-issue-to-review-67d626-route-06-core.vercel.app?via=pr-comment-feedback-link) | Apr 11, 2025 10:06am |\n| **liam-erd-sample** | 🔄 Building ([Inspect](https://vercel.com/route-06-core/liam-erd-sample/FFhrDZaH3Qu3odTc3fH3b2WvgysC)) | [Visit Preview](https://liam-erd-sample-git-rename-review-issue-to-2ec619-route-06-core.vercel.app) | 💬 [**Add feedback**](https://vercel.live/open-feedback/liam-erd-sample-git-rename-review-issue-to-2ec619-route-06-core.vercel.app?via=pr-comment-feedback-link) | Apr 11, 2025 10:06am |\n\n<details><summary>1 Skipped Deployment</summary>\n\n| Name | Status | Preview | Comments | Updated (UTC) |\n| :--- | :----- | :------ | :------- | :------ |\n| **liam-docs** | ⬜️ Ignored ([Inspect](https://vercel.com/route-06-core/liam-docs/4xVY2NiV4TtxD38jd1fueiqM4VvF)) | [Visit Preview](https://liam-docs-git-rename-review-issue-to-revie-c54b2a-route-06-core.vercel.app) |  | Apr 11, 2025 10:06am |\n</details>\n\n\n\n\n\nsupabase[bot]: [supa]:wqptaxpnysjxirjghwan\n**Updates to [Preview Branch (rename-review-issue-to-review-feedback) ↗︎](https://supabase.com/dashboard/project/wqptaxpnysjxirjghwan)**\n\n| Deployments | Status                      | Updated                   |\n| ----------- | --------------------------- | ------------------------- |\n| Database    | ✅ | Fri, 11 Apr 2025 09:58:22 UTC |\n| Services    | ✅  | Fri, 11 Apr 2025 09:58:22 UTC  |\n| APIs        | ✅      | Fri, 11 Apr 2025 09:58:22 UTC      |\n\nTasks are run on every commit but only new migration files are pushed.\nClose and reopen this PR if you want to apply changes from existing seed or migration files.\n\n| Tasks          | Status                       | Updated                    |\n| -------------- | ---------------------------- | -------------------------- |\n| Configurations | ✅ | Fri, 11 Apr 2025 09:58:31 UTC |\n| Migrations     | ✅ | Fri, 11 Apr 2025 09:58:32 UTC |\n| Seeding        | ✅   | Fri, 11 Apr 2025 09:58:32 UTC   |\n| Edge Functions | ✅  | Fri, 11 Apr 2025 09:58:32 UTC  |\n\n<hr/>\n\n\n\n\nView logs for this [Workflow Run ↗︎](https://supabase.com/dashboard/project/wqptaxpnysjxirjghwan/branches).\nLearn more about [Supabase for Git ↗︎](https://supabase.com/docs/guides/platform/branching).\n\n\nliam-migration[bot]: This PR renames the ReviewIssue table and all related components to ReviewFeedback, ensuring consistent naming across the codebase. A performance caution is raised regarding potential query plan caching issues that might need a post-migration analyze, and external integrations should be reviewed for compatibility. Overall, the changes adhere well to project naming conventions and enhance schema clarity.\n\nMigration URL: https://liam-erd-web.vercel.app/app/projects/6/ref/rename-review-issue-to-review-feedback/migrations/185\n\nER Diagram:\n- View ERD for frontend/packages/db/schema/schema.sql: https://liam-erd-web.vercel.app/app/projects/6/ref/rename-review-issue-to-review-feedback/schema/frontend/packages/db/schema/schema.sql\n\nliam-migration-preview[bot]: This migration renames the ReviewIssue table to ReviewFeedback and updates all associated references. A key caution is to ensure all parts of the app and documentation have been updated to match the new naming to avoid runtime errors and data mismatches. Overall, the change improves naming consistency and adheres well to project conventions while using transactional safety measures in the migration.\n\nMigration URL: https://liam-app-git-staging-route-06-core.vercel.app/app/projects/6/ref/rename-review-issue-to-review-feedback/migrations/182\n\nER Diagram:\n- View ERD for frontend/packages/db/schema/schema.sql: https://liam-app-git-staging-route-06-core.vercel.app/app/projects/6/ref/rename-review-issue-to-review-feedback/schema/frontend/packages/db/schema/schema.sql\n\ngithub-actions[bot]: frontend/packages/prompt-test result:\n\nvisit: https://cloud.langfuse.com/project/cm8ii4o5o03fpad078o638g1d/datasets/cm99wciaz070ead07rgjr88ou/runs/cm9cm4n18047fad07vbimtq0f\n\n| run items length |\n| --- |\n| 3 |\n<!-- Sticky Pull Request Comment -->"
}
}
