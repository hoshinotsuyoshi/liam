{
  "name": "liam-hq/liam/pull/1055",
  "assert": [
    {
      "type": "llm-rubric",
      "value": "The report evaluates the **risk of data loss**."
    }
  ],
  "vars": {
    "prDescription": "",
    "prComments": "",
    "docsContent": "",
    "schemaFile": {
      "filename": "frontend/packages/db/prisma/schema.prisma",
      "content": "datasource db {\n  provider = \"postgresql\"\n  // NOTE: Use the non-pooling URL to avoid PrismaClientUnknownRequestError for now\n  url      = env(\"POSTGRES_URL_NON_POOLING\")\n}\n\ngenerator client {\n  provider      = \"prisma-client-js\"\n  binaryTargets = [\"native\", \"rhel-openssl-3.0.x\", \"debian-openssl-3.0.x\"]\n}\n\nmodel Project {\n  id        Int      @id @default(autoincrement())\n  name      String\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  reviews   OverallReview[]\n  repositoryMappings ProjectRepositoryMapping[]\n  watchSchemaFilePatterns WatchSchemaFilePattern[]\n  knowledgeSuggestions KnowledgeSuggestion[]\n  githubDocFilePaths GitHubDocFilePath[]\n}\n\nmodel Repository {\n  id             Int      @id @default(autoincrement())\n  name           String\n  owner          String\n  installationId BigInt\n  isActive       Boolean  @default(true)\n  createdAt      DateTime @default(now())\n  updatedAt      DateTime @updatedAt\n\n  pullRequests   PullRequest[]\n  projectMappings ProjectRepositoryMapping[]\n\n  @@unique([owner, name])\n}\n\nmodel PullRequest {\n  id             Int      @id @default(autoincrement())\n  pullNumber     BigInt\n  commentId      BigInt?\n  createdAt      DateTime @default(now())\n  updatedAt      DateTime @updatedAt\n  migration Migration?\n  repositoryId   Int\n  repository     Repository @relation(fields: [repositoryId], references: [id])\n  reviews        OverallReview[]\n\n  @@unique([repositoryId, pullNumber])\n}\n\nmodel Migration {\n  id             Int         @id @default(autoincrement())\n  title          String\n  pullRequestId  Int         @unique\n  pullRequest    PullRequest @relation(fields: [pullRequestId], references: [id])\n  createdAt       DateTime  @default(now())\n  updatedAt       DateTime  @updatedAt\n}\n\nmodel OverallReview {\n  id            Int     @id @default(autoincrement())\n  projectId     Int?\n  project       Project?    @relation(fields: [projectId], references: [id])\n  pullRequestId Int\n  pullRequest   PullRequest @relation(fields: [pullRequestId], references: [id])\n  branchName    String\n  reviewComment String?\n  reviewedAt    DateTime   @default(now())\n  createdAt       DateTime  @default(now())\n  updatedAt       DateTime  @updatedAt\n}\n\nmodel ProjectRepositoryMapping {\n  id           Int        @id @default(autoincrement())\n  projectId    Int\n  project      Project    @relation(fields: [projectId], references: [id])\n  repositoryId Int\n  repository   Repository @relation(fields: [repositoryId], references: [id])\n  createdAt    DateTime   @default(now())\n  updatedAt    DateTime   @updatedAt\n\n  @@unique([projectId, repositoryId])\n}\n\nmodel WatchSchemaFilePattern {\n  id        Int      @id @default(autoincrement())\n  pattern   String\n  projectId Int\n  project   Project  @relation(fields: [projectId], references: [id])\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n\n\nenum KnowledgeType {\n  SCHEMA\n  DOCS\n}\n\nmodel KnowledgeSuggestion {\n  id             Int           @id @default(autoincrement())\n  type           KnowledgeType\n  title          String\n  path           String\n  content        String\n  fileSha        String?\n  branchName     String\n  projectId      Int\n  project        Project       @relation(fields: [projectId], references: [id])\n  approvedAt     DateTime?\n  createdAt      DateTime      @default(now())\n  updatedAt      DateTime      @updatedAt\n}"
    },
    "fileChanges": [
      {
        "filename": "frontend/packages/db/prisma/schema.prisma",
        "status": "modified",
        "changes": 12,
        "patch": "@@ -113,15 +113,3 @@ model KnowledgeSuggestion {\n   createdAt      DateTime      @default(now())\n   updatedAt      DateTime      @updatedAt\n }\n-\n-model GitHubDocFilePath {\n-  id             Int      @id @default(autoincrement())\n-  path           String   // File path in GitHub repository\n-  isReviewEnabled Boolean @default(true)  // Whether ReviewAgent should read this file\n-  projectId      Int\n-  project        Project  @relation(fields: [projectId], references: [id])\n-  createdAt      DateTime @default(now())\n-  updatedAt      DateTime @updatedAt\n-\n-  @@unique([path, projectId])  // Composite unique key to ensure no duplicate paths within a project\n-}"
      }
    ]
  }
}
